theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

predicate appears (v:'a) (a:array 'a) (s:int) = exists i:int. (infix_lseq 0
  i /\ infix_ls i s) /\ (mixfix_lbrb1 a i = v)

predicate nodup (a:array 'a) (s:int) = forall i:int. infix_lseq 0 i /\
  infix_ls i s -> not appears (mixfix_lbrb1 a i) a i

(* use Spec *)

type set 'a

(* meta material_type_arg type set, 0 *)

predicate mem 'a (set 'a)

predicate infix_eqeq (s1:set 'a) (s2:set 'a) = forall x:'a. mem x s1 <-> mem
  x s2

axiom extensionality : forall s1:set 'a, s2:set 'a. infix_eqeq s1 s2 ->
  (s1 = s2)

predicate subset (s1:set 'a) (s2:set 'a) = forall x:'a. mem x s1 -> mem x s2

axiom subset_refl : forall s:set 'a. subset s s

axiom subset_trans : forall s1:set 'a, s2:set 'a, s3:set 'a. subset s1 s2 ->
  subset s2 s3 -> subset s1 s3

function empty : set 'a

predicate is_empty (s:set 'a) = forall x:'a. not mem x s

axiom empty_def1 : is_empty (empty:set 'a)

axiom mem_empty : forall x:'a. mem x (empty:set 'a) <-> false

function add 'a (set 'a) : set 'a

axiom add_def1 : forall x:'a, y:'a. forall s:set 'a. mem x (add y s) <->
  (x = y) \/ mem x s

function singleton (x:'a) : set 'a = add x (empty:set 'a)

function remove 'a (set 'a) : set 'a

axiom remove_def1 : forall x:'a, y:'a, s:set 'a. mem x (remove y s) <->
  not (x = y) /\ mem x s

axiom add_remove : forall x:'a, s:set 'a. mem x s -> (add x (remove x s) = s)

axiom remove_add : forall x:'a, s:set 'a. (remove x (add x s) = remove x s)

axiom subset_remove : forall x:'a, s:set 'a. subset (remove x s) s

function union (set 'a) (set 'a) : set 'a

axiom union_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem x (union s1 s2) <->
  mem x s1 \/ mem x s2

function inter (set 'a) (set 'a) : set 'a

axiom inter_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem x (inter s1 s2) <->
  mem x s1 /\ mem x s2

function diff (set 'a) (set 'a) : set 'a

axiom diff_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem x (diff s1 s2) <->
  mem x s1 /\ not mem x s2

axiom subset_diff : forall s1:set 'a, s2:set 'a. subset (diff s1 s2) s1

function choose (set 'a) : 'a

axiom choose_def : forall s:set 'a. not is_empty s -> mem (choose s) s

(* clone set.SetGen with type set1 = set, function choose1 = choose,
  function diff1 = diff, function inter1 = inter, function union1 = union,
  function remove1 = remove, function singleton1 = singleton,
  function add1 = add, predicate is_empty1 = is_empty,
  function empty1 = empty, predicate subset1 = subset,
  predicate infix_eqeq1 = infix_eqeq, predicate mem1 = mem,
  prop choose_def1 = choose_def, prop subset_diff1 = subset_diff,
  prop diff_def11 = diff_def1, prop inter_def11 = inter_def1,
  prop union_def11 = union_def1, prop subset_remove1 = subset_remove,
  prop remove_add1 = remove_add, prop add_remove1 = add_remove,
  prop remove_def11 = remove_def1, prop add_def11 = add_def1,
  prop mem_empty1 = mem_empty, prop empty_def11 = empty_def1,
  prop subset_trans1 = subset_trans, prop subset_refl1 = subset_refl,
  prop extensionality1 = extensionality *)

function cardinal (set 'a) : int

axiom cardinal_nonneg : forall s:set 'a. infix_gteq (cardinal s) 0

axiom cardinal_empty : forall s:set 'a. (cardinal s = 0) <-> is_empty s

axiom cardinal_add : forall x:'a. forall s:set 'a. not mem x s -> (cardinal
  (add x s) = infix_pl 1 (cardinal s))

axiom cardinal_remove : forall x:'a. forall s:set 'a. mem x s -> (cardinal
  s = infix_pl 1 (cardinal (remove x s)))

axiom cardinal_subset : forall s1:set 'a, s2:set 'a. subset s1 s2 ->
  infix_lseq (cardinal s1) (cardinal s2)

axiom subset_eq : forall s1:set 'a, s2:set 'a. subset s1 s2 -> (cardinal
  s1 = cardinal s2) -> infix_eqeq s1 s2

axiom cardinal1 : forall s:set 'a. (cardinal s = 1) -> (forall x:'a. mem x
  s -> (x = choose s))

(* use set.Fset *)

type elt

type t17 =
  | Mk_t (s:set elt)

(* use MutableSet *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

(* use ref.Refint *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_remove_duplicate "expl:VC for remove_duplicate" : forall a:
  int, a1:map int elt. let a2 = Mk_array a a1 in ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 a) && ("stop_split" infix_lseq 1 a) ->
  (forall s1:set elt. ("stop_split" is_empty s1) -> (let o = infix_mn a 1 in
  infix_lseq 0 o -> (forall s2:set elt. ("stop_split" forall x:elt. appears x
  a2 (infix_pl o 1) <-> mem x s2) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 0 /\ infix_ls 0 a) ->
  (let o1 = cardinal s2 in ("asym_split" "stop_split"
  "expl:array creation size" infix_gteq o1 0) -> (forall r:int, r1:map int
  elt. let r2 = Mk_array r r1 in ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 r) && ("stop_split" (r = o1)) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i o1 -> (get r1
  i = get a1 0)) -> (forall s3:set elt. ("stop_split" is_empty s3) ->
  (let o2 = infix_mn a 1 in infix_lseq 0 o2 -> (forall j:int, r3:map int elt,
  s4:set elt. let r4 = Mk_array r r3 in forall i:int. infix_lseq 0 i /\
  infix_lseq i o2 -> ("stop_split" forall x:elt. appears x a2 i <-> mem x
  s4) /\ ("stop_split" forall x:elt. mem x s4 <-> appears x r4 j) /\
  ("stop_split" nodup r4 j) /\ ("stop_split" infix_lseq 0 j /\ (j = cardinal
  s4) /\ infix_lseq (cardinal s4) r) /\ ("stop_split" subset s4 s2) ->
  ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0 i /\
  infix_ls i a) -> (forall o3:bool. ("stop_split" (o3 = True) <-> mem (get a1
  i) s4) -> not (o3 = True) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 i /\ infix_ls i a) -> (forall s5:
  set elt. ("stop_split" (s5 = add (get a1 i) s4)) -> ("asym_split"
  "stop_split" "expl:index in array bounds" infix_lseq 0 i /\ infix_ls i
  a) -> ("asym_split" ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 r) && ("stop_split"
  "expl:index in array bounds" infix_lseq 0 j /\ infix_ls j r)) ->
  (forall r5:map int elt. let r6 = Mk_array r r5 in ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 r) &&
  ("stop_split" (r5 = set r3 j (get a1 i))) -> (forall j1:int.
  ("stop_split" (j1 = infix_pl j 1)) ->
  ("expl:loop invariant preservation" forall x:elt. appears x a2 (infix_pl i
  1) <-> mem x s5)))))))))))))

end
