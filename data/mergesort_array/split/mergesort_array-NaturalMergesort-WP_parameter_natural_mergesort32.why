theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type elt5

predicate le6 elt5 elt5

(* clone relations.EndoRelation with type t8 = elt5, predicate rel = le6,  *)

axiom Refl13 : forall x:elt5. le6 x x

(* clone relations.Reflexive with type t9 = elt5, predicate rel1 = le6,
  prop Refl1 = Refl13 *)

(* clone relations.EndoRelation with type t8 = elt5, predicate rel = le6,  *)

axiom Trans13 : forall x:elt5, y:elt5, z:elt5. le6 x y -> le6 y z -> le6 x z

(* clone relations.Transitive with type t10 = elt5, predicate rel2 = le6,
  prop Trans1 = Trans13 *)

(* clone relations.PreOrder with type t11 = elt5, predicate rel3 = le6,
  prop Trans2 = Trans13, prop Refl2 = Refl13 *)

(* clone relations.EndoRelation with type t8 = elt5, predicate rel = le6,  *)

axiom Total11 : forall x:elt5, y:elt5. le6 x y \/ le6 y x

(* clone relations.Total with type t14 = elt5, predicate rel6 = le6,
  prop Total1 = Total11 *)

(* clone relations.TotalPreOrder with type t17 = elt5, predicate rel8 = le6,
  prop Total5 = Total11, prop Trans7 = Trans13, prop Refl7 = Refl13 *)

predicate sorted_sub5 (a:array elt5) (l:int) (u:int) = forall i1:int, i2:int.
  infix_lseq l i1 /\ infix_lseq i1 i2 /\ infix_ls i2 u -> le6 (mixfix_lbrb1 a
  i1) (mixfix_lbrb1 a i2)

predicate sorted5 (a:array elt5) = forall i1:int, i2:int. infix_lseq 0 i1 /\
  infix_lseq i1 i2 /\ infix_ls i2 (length a) -> le6 (mixfix_lbrb1 a i1)
  (mixfix_lbrb1 a i2)

(* clone array.Sorted with type elt1 = elt5, predicate sorted1 = sorted5,
  predicate sorted_sub1 = sorted_sub5, predicate le1 = le6,  *)

(* clone Elt with type elt2 = elt5, predicate sorted2 = sorted5,
  predicate sorted_sub2 = sorted_sub5, predicate le2 = le6,
  prop Total6 = Total11, prop Trans8 = Trans13, prop Refl8 = Refl13 *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

(* use ref.Refint *)

function occ 'a (map int 'a) int int : int

axiom occ_empty : forall v:'a, m:map int 'a, l:int, u:int. infix_lseq u l ->
  (occ v m l u = 0)

axiom occ_right_no_add : forall v:'a, m:map int 'a, l:int, u:int. infix_ls l
  u -> not (mixfix_lbrb m (infix_mn u 1) = v) -> (occ v m l u = occ v m l
  (infix_mn u 1))

axiom occ_right_add : forall v:'a, m:map int 'a, l:int, u:int. infix_ls l
  u -> (mixfix_lbrb m (infix_mn u 1) = v) -> (occ v m l u = infix_pl 1 (occ v
  m l (infix_mn u 1)))

axiom occ_bounds : forall v:'a, m:map int 'a, l:int, u:int. infix_lseq l u ->
  infix_lseq 0 (occ v m l u) /\ infix_lseq (occ v m l u) (infix_mn u l)

axiom occ_append : forall v:'a, m:map int 'a, l:int, mid:int, u:int.
  infix_lseq l mid /\ infix_lseq mid u -> (occ v m l u = infix_pl (occ v m l
  mid) (occ v m mid u))

axiom occ_neq : forall v:'a, m:map int 'a, l:int, u:int. (forall i:int.
  infix_lseq l i /\ infix_ls i u -> not (mixfix_lbrb m i = v)) -> (occ v m l
  u = 0)

axiom occ_exists : forall v:'a, m:map int 'a, l:int, u:int. infix_gt (occ v m
  l u) 0 -> (exists i:int. (infix_lseq l i /\ infix_ls i u) /\ (mixfix_lbrb m
  i = v))

axiom occ_pos : forall m:map int 'a, l:int, u:int, i:int. infix_lseq l i /\
  infix_ls i u -> infix_gt (occ (mixfix_lbrb m i) m l u) 0

axiom occ_eq : forall v:'a, m1:map int 'a, m2:map int 'a, l:int, u:int.
  (forall i:int. infix_lseq l i /\ infix_ls i u -> (mixfix_lbrb m1
  i = mixfix_lbrb m2 i)) -> (occ v m1 l u = occ v m2 l u)

(* use map.Occ *)

predicate permut (m1:map int 'a) (m2:map int 'a) (l:int) (u:int) = forall v:
  'a. (occ v m1 l u = occ v m2 l u)

axiom permut_trans : forall a1:map int 'a, a2:map int 'a, a3:map int 'a.
  forall l:int, u:int. permut a1 a2 l u -> permut a2 a3 l u -> permut a1 a3 l
  u

axiom permut_exists : forall a1:map int 'a, a2:map int 'a, l:int, u:int, i:
  int. permut a1 a2 l u -> infix_lseq l i /\ infix_ls i u -> (exists j:int.
  (infix_lseq l j /\ infix_ls j u) /\ (mixfix_lbrb a1 j = mixfix_lbrb a2 i))

(* use map.MapPermut *)

predicate map_eq_sub (a1:map int 'a) (a2:map int 'a) (l:int) (u:int) =
  forall i:int. infix_lseq l i /\ infix_ls i u -> (mixfix_lbrb a1
  i = mixfix_lbrb a2 i)

(* use map.MapEq *)

predicate array_eq_sub (a1:array 'a) (a2:array 'a) (l:int) (u:int) = (length
  a1 = length a2) /\ (infix_lseq 0 l /\ infix_lseq l (length a1)) /\
  (infix_lseq 0 u /\ infix_lseq u (length a1)) /\ map_eq_sub (elts a1) (elts
  a2) l u

predicate array_eq (a1:array 'a) (a2:array 'a) = (length a1 = length a2) /\
  map_eq_sub (elts a1) (elts a2) 0 (length a1)

(* use array.ArrayEq *)

predicate exchange (a1:map int 'a) (a2:map int 'a) (l:int) (u:int) (i:int)
  (j:int) = (infix_lseq l i /\ infix_ls i u) /\ (infix_lseq l j /\ infix_ls j
  u) /\ (mixfix_lbrb a1 i = mixfix_lbrb a2 j) /\ (mixfix_lbrb a1
  j = mixfix_lbrb a2 i) /\ (forall k:int. infix_lseq l k /\ infix_ls k u ->
  not (k = i) -> not (k = j) -> (mixfix_lbrb a1 k = mixfix_lbrb a2 k))

axiom exchange_set : forall a:map int 'a, l:int, u:int, i:int, j:int.
  infix_lseq l i /\ infix_ls i u -> infix_lseq l j /\ infix_ls j u ->
  exchange a (mixfix_lblsmnrb (mixfix_lblsmnrb a i (mixfix_lbrb a j)) j
  (mixfix_lbrb a i)) l u i j

(* use map.MapExchange *)

predicate exchange1 (a1:array 'a) (a2:array 'a) (i:int) (j:int) = (length
  a1 = length a2) /\ exchange (elts a1) (elts a2) 0 (length a1) i j

(* use array.ArrayExchange *)

predicate permut1 (a1:array 'a) (a2:array 'a) (l:int) (u:int) = (length
  a1 = length a2) /\ (infix_lseq 0 l /\ infix_lseq l (length a1)) /\
  (infix_lseq 0 u /\ infix_lseq u (length a1)) /\ permut (elts a1) (elts a2)
  l u

predicate permut_sub (a1:array 'a) (a2:array 'a) (l:int) (u:int) = map_eq_sub
  (elts a1) (elts a2) 0 l /\ permut1 a1 a2 l u /\ map_eq_sub (elts a1) (elts
  a2) u (length a1)

predicate permut_all (a1:array 'a) (a2:array 'a) = (length a1 = length a2) /\
  permut (elts a1) (elts a2) 0 (length a1)

axiom exchange_permut_sub : forall a1:array 'a, a2:array 'a, i:int, j:int, l:
  int, u:int. exchange1 a1 a2 i j -> infix_lseq l i /\ infix_ls i u ->
  infix_lseq l j /\ infix_ls j u -> infix_lseq 0 l -> infix_lseq u (length
  a1) -> permut_sub a1 a2 l u

axiom permut_sub_weakening : forall a1:array 'a, a2:array 'a, l1:int, u1:int,
  l2:int, u2:int. permut_sub a1 a2 l1 u1 -> infix_lseq 0 l2 /\ infix_lseq l2
  l1 -> infix_lseq u1 u2 /\ infix_lseq u2 (length a1) -> permut_sub a1 a2 l2
  u2

axiom exchange_permut_all : forall a1:array 'a, a2:array 'a, i:int, j:int.
  exchange1 a1 a2 i j -> permut_all a1 a2

(* use array.ArrayPermut *)

(* clone Merge with type elt = elt5, predicate sorted = sorted5,
  predicate sorted_sub = sorted_sub5, predicate le = le6,
  prop WP_parameter_merge_using = WP_parameter_merge_using3,
  prop WP_parameter_merge = WP_parameter_merge3, prop Total4 = Total11,
  prop Trans6 = Trans13, prop Refl6 = Refl13 *)

function abs (x:int) : int = if infix_gteq x 0 then x else prefix_mn x

axiom Abs_le : forall x:int, y:int. infix_lseq (abs x) y <-> infix_lseq
  (prefix_mn y) x /\ infix_lseq x y

axiom Abs_pos : forall x:int. infix_gteq (abs x) 0

(* use int.Abs *)

function div int int : int

function mod int int : int

axiom Div_mod : forall x:int, y:int. not (y = 0) -> (x = infix_pl (infix_as y
  (div x y)) (mod x y))

axiom Div_bound : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_lseq 0 (div x y) /\ infix_lseq (div x y) x

axiom Mod_bound : forall x:int, y:int. not (y = 0) -> infix_ls (prefix_mn
  (abs y)) (mod x y) /\ infix_ls (mod x y) (abs y)

axiom Div_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_gteq (div x y) 0

axiom Div_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ infix_gt y 0 ->
  infix_lseq (div x y) 0

axiom Mod_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ not (y = 0) ->
  infix_gteq (mod x y) 0

axiom Mod_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ not (y = 0) ->
  infix_lseq (mod x y) 0

axiom Rounds_toward_zero : forall x:int, y:int. not (y = 0) -> infix_lseq
  (abs (infix_as (div x y) y)) (abs x)

axiom Div_1 : forall x:int. (div x 1 = x)

axiom Mod_1 : forall x:int. (mod x 1 = 0)

axiom Div_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (div x
  y = 0)

axiom Mod_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (mod x
  y = x)

axiom Div_mult : forall x:int, y:int, z:int [div (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (div (infix_pl
  (infix_as x y) z) x = infix_pl y (div z x))

axiom Mod_mult : forall x:int, y:int, z:int [mod (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (mod (infix_pl
  (infix_as x y) z) x = mod z x)

(* use int.ComputerDivision *)

(* use mach.int.Int1 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl11 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans11 *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans11, prop Refl2 = Refl11 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm5 *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm5,
  prop Trans3 = Trans11, prop Refl3 = Refl11 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total9 *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total9,
  prop Antisymm3 = Antisymm5, prop Trans4 = Trans11, prop Refl4 = Refl11 *)

function min (x:int) (y:int) : int = if infix_lseq x y then x else y

function max (x:int) (y:int) : int = if infix_lseq x y then y else x

axiom Min_r : forall x:int, y:int. infix_lseq y x -> (min x y = y)

axiom Max_l : forall x:int, y:int. infix_lseq y x -> (max x y = x)

axiom Min_comm : forall x:int, y:int. (min x y = min y x)

axiom Max_comm : forall x:int, y:int. (max x y = max y x)

axiom Min_assoc : forall x:int, y:int, z:int. (min (min x y) z = min x (min y
  z))

axiom Max_assoc : forall x:int, y:int, z:int. (max (max x y) z = max x (max y
  z))

(* clone relations.MinMax with type t18 = int, function max1 = max,
  function min1 = min, predicate le5 = infix_lseq,
  prop Max_assoc1 = Max_assoc, prop Min_assoc1 = Min_assoc,
  prop Max_comm1 = Max_comm, prop Min_comm1 = Min_comm, prop Max_l1 = Max_l,
  prop Min_r1 = Min_r, prop Total10 = Total9, prop Antisymm6 = Antisymm5,
  prop Trans12 = Trans11, prop Refl12 = Refl11 *)

(* use int.MinMax1 *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_natural_mergesort
  "expl:VC for natural_mergesort" : forall a:int, a1:map int elt5.
  let a2 = Mk_array a a1 in ("stop_split" "expl:type invariant" infix_lseq 0
  a) -> infix_gteq a 2 -> (forall tmp:int, tmp1:map int elt5. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 tmp) &&
  ("stop_split" (tmp = a)) /\ ("stop_split" forall i:int. infix_lseq 0 i /\
  infix_ls i tmp -> (get tmp1 i = get a1 i)) -> (forall first_run:int, a3:map
  int elt5. let a4 = Mk_array a a3 in ("stop_split" ("asym_split" infix_lseq
  0 first_run /\ infix_lseq first_run a) && sorted_sub5 a4 0 first_run) /\
  ("stop_split" permut_all a2 a4) -> (forall lo:int, first_run1:int, a5:map
  int elt5. let a6 = Mk_array a a5 in ("stop_split" infix_lseq 0 lo /\
  infix_lseq lo a) /\ ("stop_split" infix_lseq first_run first_run1 /\
  infix_lseq first_run1 a) /\ ("stop_split" sorted_sub5 a6 0 first_run1) /\
  ("stop_split" (lo = 0) \/ infix_gteq lo first_run1 /\ infix_gt first_run1
  first_run) /\ ("stop_split" permut_all a4 a6) -> not infix_ls lo (infix_mn
  a 1) -> ("expl:loop invariant preservation" ("asym_split" infix_lseq 0
  first_run1 /\ infix_lseq first_run1 a) && sorted_sub5 a6 0 first_run1))))

end
