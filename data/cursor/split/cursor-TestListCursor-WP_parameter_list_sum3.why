theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type list 'a =
  | Nil
  | Cons 'a (list 'a)

(* use list.List *)

function length1 (l:list 'a) : int =
  match l with
  | Nil -> 0
  | Cons _ r -> infix_pl 1 (length1 r)
  end

axiom Length_nonnegative : forall l:list 'a. infix_gteq (length1 l) 0

axiom Length_nil : forall l:list 'a. (length1 l = 0) <-> (l = Nil:list 'a)

(* use list.Length *)

function sum1 (l:list int) : int =
  match l with
  | Nil -> 0
  | Cons x r -> infix_pl x (sum1 r)
  end

(* use list.Sum1 *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

(* use ref.Refint *)

function rev_append (s:list 'a) (t:list 'a) : list 'a =
  match s with
  | Cons x r -> rev_append r (Cons x t)
  | Nil -> t
  end

function infix_plpl1 (l1:list 'a) (l2:list 'a) : list 'a =
  match l1 with
  | Nil -> l2
  | Cons x1 r1 -> Cons x1 (infix_plpl1 r1 l2)
  end

axiom Append_assoc : forall l1:list 'a, l2:list 'a, l3:list 'a. (infix_plpl1
  l1 (infix_plpl1 l2 l3) = infix_plpl1 (infix_plpl1 l1 l2) l3)

axiom Append_l_nil : forall l:list 'a. (infix_plpl1 l (Nil:list 'a) = l)

axiom Append_length : forall l1:list 'a, l2:list 'a. (length1 (infix_plpl1 l1
  l2) = infix_pl (length1 l1) (length1 l2))

predicate mem (x:'a) (l:list 'a) =
  match l with
  | Nil -> false
  | Cons y r -> (x = y) \/ mem x r
  end

(* use list.Mem *)

axiom mem_append : forall x:'a, l1:list 'a, l2:list 'a. mem x (infix_plpl1 l1
  l2) <-> mem x l1 \/ mem x l2

axiom mem_decomp : forall x:'a, l:list 'a. mem x l -> (exists l1:list 'a, l2:
  list 'a. (l = infix_plpl1 l1 (Cons x l2)))

(* use list.Append *)

axiom rev_append_append_l : forall r:list 'a, s:list 'a, t:list 'a.
  (rev_append (infix_plpl1 r s) t = rev_append s (rev_append r t))

axiom rev_append_length : forall s:list 'a, t:list 'a. (length1 (rev_append s
  t) = infix_pl (length1 s) (length1 t))

function reverse (l:list 'a) : list 'a =
  match l with
  | Nil -> Nil:list 'a
  | Cons x r -> infix_plpl1 (reverse r) (Cons x (Nil:list 'a))
  end

axiom reverse_append : forall l1:list 'a, l2:list 'a, x:'a. (infix_plpl1
  (reverse (Cons x l1)) l2 = infix_plpl1 (reverse l1) (Cons x l2))

axiom reverse_cons : forall l:list 'a, x:'a. (reverse (Cons x
  l) = infix_plpl1 (reverse l) (Cons x (Nil:list 'a)))

axiom cons_reverse : forall l:list 'a, x:'a. (Cons x (reverse l) = reverse
  (infix_plpl1 l (Cons x (Nil:list 'a))))

axiom reverse_reverse : forall l:list 'a. (reverse (reverse l) = l)

axiom reverse_mem : forall l:list 'a, x:'a. mem x l <-> mem x (reverse l)

axiom Reverse_length : forall l:list 'a. (length1 (reverse l) = length1 l)

(* use list.Reverse *)

axiom rev_append_def : forall r:list 'a, s:list 'a. (rev_append r
  s = infix_plpl1 (reverse r) s)

axiom rev_append_append_r : forall r:list 'a, s:list 'a, t:list 'a.
  (rev_append r (infix_plpl1 s t) = rev_append (rev_append s r) t)

(* use list.RevAppend *)

type t19 = list int

type elt1 = int

type cursor2 =
  | Mk_cursor1 (done_:list int) (to_do:list int)

predicate coherent2 (t:list int) (c:cursor2) = (t = rev_append (done_ c)
  (to_do c))

(* use IntListCursor *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_list_sum "expl:VC for list_sum" : forall l:list int.
  forall c:list int, c1:list int. ("stop_split" (c = Nil:list int)) /\
  ("stop_split" (l = rev_append c c1)) -> (forall rho:list int, rho1:list
  int, s:int. ("stop_split" (sum1 l = infix_pl s (sum1 rho))) /\
  ("stop_split" (l = rev_append rho1 rho)) -> ("asym_split" "stop_split"
  "expl:precondition" (l = rev_append rho1 rho)) -> (forall result:bool.
  ("stop_split" (result = True) <-> not (rho = Nil:list int)) ->
  (result = True) -> ("expl:precondition" not (rho = Nil:list int))))

end
