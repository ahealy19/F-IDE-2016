theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

type grid = map int int

predicate is_index (i:int) = infix_lseq 0 i /\ infix_ls i 81

predicate valid_values (g:map int int) = forall i:int. is_index i ->
  infix_lseq 0 (mixfix_lbrb g i) /\ infix_lseq (mixfix_lbrb g i) 9

predicate grid_eq_sub (g1:map int int) (g2:map int int) (a:int) (b:int) =
  forall j:int. infix_lseq a j /\ infix_ls j b -> (mixfix_lbrb g1
  j = mixfix_lbrb g2 j)

predicate grid_eq (g1:map int int) (g2:map int int) = grid_eq_sub g1 g2 0 81

axiom grid_eq_sub : forall g1:map int int, g2:map int int, a:int, b:int.
  (infix_lseq 0 a /\ infix_lseq a 81) /\ (infix_lseq 0 b /\ infix_lseq b
  81) /\ grid_eq g1 g2 -> grid_eq_sub g1 g2 a b

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type sudoku_chunks =
  | Mk_sudoku_chunks (column_start:array int) (column_offsets:array int)
      (row_start:array int) (row_offsets:array int) (square_start:array int)
      (square_offsets:array int)

predicate chunk_valid_indexes (start:array int) (offsets:array int) = (length
  start = 81) /\ (length offsets = 9) /\ (forall i:int, o:int. is_index i /\
  infix_lseq 0 o /\ infix_ls o 9 -> is_index (infix_pl (mixfix_lbrb1 start i)
  (mixfix_lbrb1 offsets o)))

predicate disjoint_chunks (start:array int) (offsets:array int) = (length
  start = 81) /\ (length offsets = 9) /\ (forall i1:int, i2:int, o:int.
  is_index i1 /\ is_index i2 /\ infix_lseq 0 o /\ infix_ls o 9 ->
  (let s1 = mixfix_lbrb1 start i1 in let s2 = mixfix_lbrb1 start i2 in
  not (s1 = s2) -> not (i1 = infix_pl s2 (mixfix_lbrb1 offsets o))))

predicate well_formed_sudoku (s:sudoku_chunks) = chunk_valid_indexes
  (column_start s) (column_offsets s) /\ chunk_valid_indexes (row_start s)
  (row_offsets s) /\ chunk_valid_indexes (square_start s) (square_offsets
  s) /\ disjoint_chunks (column_start s) (column_offsets s) /\
  disjoint_chunks (row_start s) (row_offsets s) /\ disjoint_chunks
  (square_start s) (square_offsets s)

predicate valid_chunk (g:map int int) (i:int) (start:array int) (offsets:
  array int) = let s = mixfix_lbrb1 start i in forall o1:int, o2:int.
  (infix_lseq 0 o1 /\ infix_ls o1 9) /\ (infix_lseq 0 o2 /\ infix_ls o2 9) /\
  not (o1 = o2) -> (let i1 = infix_pl s (mixfix_lbrb1 offsets o1) in
  let i2 = infix_pl s (mixfix_lbrb1 offsets o2) in (infix_lseq 1 (get g
  i1) /\ infix_lseq (get g i1) 9) /\ infix_lseq 1 (get g i2) /\ infix_lseq
  (get g i2) 9 -> not (get g i1 = get g i2))

predicate valid_column (s:sudoku_chunks) (g:map int int) (i:int) =
  valid_chunk g i (column_start s) (column_offsets s)

predicate valid_row (s:sudoku_chunks) (g:map int int) (i:int) = valid_chunk g
  i (row_start s) (row_offsets s)

predicate valid_square (s:sudoku_chunks) (g:map int int) (i:int) =
  valid_chunk g i (square_start s) (square_offsets s)

predicate valid (s:sudoku_chunks) (g:map int int) = forall i:int. is_index
  i -> valid_column s g i /\ valid_row s g i /\ valid_square s g i

predicate full (g:map int int) = forall i:int. is_index i -> infix_lseq 1
  (get g i) /\ infix_lseq (get g i) 9

predicate included (g1:map int int) (g2:map int int) = forall i:int. is_index
  i /\ infix_lseq 1 (get g1 i) /\ infix_lseq (get g1 i) 9 -> (get g2 i = get
  g1 i)

axiom subset_valid_chunk : forall g:map int int, h:map int int. included g
  h -> (forall i:int, s:array int, o:array int. is_index i /\
  chunk_valid_indexes s o /\ valid_chunk h i s o -> valid_chunk g i s o)

axiom subset_valid : forall s:sudoku_chunks, g:map int int, h:map int int.
  well_formed_sudoku s /\ included g h /\ valid s h -> valid s g

predicate is_solution_for (s:sudoku_chunks) (sol:map int int) (data:map int
  int) = included data sol /\ full sol /\ valid s sol

(* use Grid *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_classical_sudoku
  "expl:VC for classical_sudoku" : ("asym_split" "stop_split"
  "expl:array creation size" infix_gteq 81 0) -> (forall cs:int, cs1:map int
  int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs = 81)) /\ ("stop_split" forall i:int. infix_lseq 0 i /\
  infix_ls i 81 -> (get cs1 i = 0)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 0 /\ infix_ls 0 cs) ->
  (forall cs2:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs2 = set cs1 0
  0)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  1 /\ infix_ls 1 cs) -> (forall cs3:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs3 = set cs2 1
  1)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  2 /\ infix_ls 2 cs) -> (forall cs4:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs4 = set cs3 2
  2)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  3 /\ infix_ls 3 cs) -> (forall cs5:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs5 = set cs4 3
  3)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  4 /\ infix_ls 4 cs) -> (forall cs6:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs6 = set cs5 4
  4)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  5 /\ infix_ls 5 cs) -> (forall cs7:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs7 = set cs6 5
  5)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  6 /\ infix_ls 6 cs) -> (forall cs8:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs8 = set cs7 6
  6)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  7 /\ infix_ls 7 cs) -> (forall cs9:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs9 = set cs8 7
  7)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  8 /\ infix_ls 8 cs) -> (forall cs10:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs10 = set cs9 8
  8)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  9 /\ infix_ls 9 cs) -> (forall cs11:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs11 = set cs10 9
  0)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  10 /\ infix_ls 10 cs) -> (forall cs12:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs12 = set cs11 10 1)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 11 /\ infix_ls 11 cs) ->
  (forall cs13:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs13 = set cs12 11
  2)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  12 /\ infix_ls 12 cs) -> (forall cs14:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs14 = set cs13 12 3)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 13 /\ infix_ls 13 cs) ->
  (forall cs15:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs15 = set cs14 13
  4)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  14 /\ infix_ls 14 cs) -> (forall cs16:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs16 = set cs15 14 5)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 15 /\ infix_ls 15 cs) ->
  (forall cs17:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs17 = set cs16 15
  6)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  16 /\ infix_ls 16 cs) -> (forall cs18:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs18 = set cs17 16 7)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 17 /\ infix_ls 17 cs) ->
  (forall cs19:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs19 = set cs18 17
  8)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  18 /\ infix_ls 18 cs) -> (forall cs20:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs20 = set cs19 18 0)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 19 /\ infix_ls 19 cs) ->
  (forall cs21:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs21 = set cs20 19
  1)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  20 /\ infix_ls 20 cs) -> (forall cs22:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs22 = set cs21 20 2)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 21 /\ infix_ls 21 cs) ->
  (forall cs23:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs23 = set cs22 21
  3)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  22 /\ infix_ls 22 cs) -> (forall cs24:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs24 = set cs23 22 4)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 23 /\ infix_ls 23 cs) ->
  (forall cs25:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs25 = set cs24 23
  5)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  24 /\ infix_ls 24 cs) -> (forall cs26:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs26 = set cs25 24 6)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 25 /\ infix_ls 25 cs) ->
  (forall cs27:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs27 = set cs26 25
  7)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  26 /\ infix_ls 26 cs) -> (forall cs28:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs28 = set cs27 26 8)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 27 /\ infix_ls 27 cs) ->
  (forall cs29:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs29 = set cs28 27
  0)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  28 /\ infix_ls 28 cs) -> (forall cs30:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs30 = set cs29 28 1)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 29 /\ infix_ls 29 cs) ->
  (forall cs31:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs31 = set cs30 29
  2)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  30 /\ infix_ls 30 cs) -> (forall cs32:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs32 = set cs31 30 3)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 31 /\ infix_ls 31 cs) ->
  (forall cs33:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs33 = set cs32 31
  4)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  32 /\ infix_ls 32 cs) -> (forall cs34:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs34 = set cs33 32 5)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 33 /\ infix_ls 33 cs) ->
  (forall cs35:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs35 = set cs34 33
  6)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  34 /\ infix_ls 34 cs) -> (forall cs36:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs36 = set cs35 34 7)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 35 /\ infix_ls 35 cs) ->
  (forall cs37:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs37 = set cs36 35
  8)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  36 /\ infix_ls 36 cs) -> (forall cs38:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs38 = set cs37 36 0)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 37 /\ infix_ls 37 cs) ->
  (forall cs39:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs39 = set cs38 37
  1)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  38 /\ infix_ls 38 cs) -> (forall cs40:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs40 = set cs39 38 2)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 39 /\ infix_ls 39 cs) ->
  (forall cs41:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs41 = set cs40 39
  3)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  40 /\ infix_ls 40 cs) -> (forall cs42:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs42 = set cs41 40 4)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 41 /\ infix_ls 41 cs) ->
  (forall cs43:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs43 = set cs42 41
  5)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  42 /\ infix_ls 42 cs) -> (forall cs44:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs44 = set cs43 42 6)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 43 /\ infix_ls 43 cs) ->
  (forall cs45:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs45 = set cs44 43
  7)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  44 /\ infix_ls 44 cs) -> (forall cs46:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs46 = set cs45 44 8)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 45 /\ infix_ls 45 cs) ->
  (forall cs47:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs47 = set cs46 45
  0)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  46 /\ infix_ls 46 cs) -> (forall cs48:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs48 = set cs47 46 1)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 47 /\ infix_ls 47 cs) ->
  (forall cs49:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs49 = set cs48 47
  2)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  48 /\ infix_ls 48 cs) -> (forall cs50:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs50 = set cs49 48 3)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 49 /\ infix_ls 49 cs) ->
  (forall cs51:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs51 = set cs50 49
  4)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  50 /\ infix_ls 50 cs) -> (forall cs52:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs52 = set cs51 50 5)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 51 /\ infix_ls 51 cs) ->
  (forall cs53:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs53 = set cs52 51
  6)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  52 /\ infix_ls 52 cs) -> (forall cs54:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs54 = set cs53 52 7)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 53 /\ infix_ls 53 cs) ->
  (forall cs55:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs55 = set cs54 53
  8)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  54 /\ infix_ls 54 cs) -> (forall cs56:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs56 = set cs55 54 0)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 55 /\ infix_ls 55 cs) ->
  (forall cs57:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs57 = set cs56 55
  1)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  56 /\ infix_ls 56 cs) -> (forall cs58:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs58 = set cs57 56 2)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 57 /\ infix_ls 57 cs) ->
  (forall cs59:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs59 = set cs58 57
  3)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  58 /\ infix_ls 58 cs) -> (forall cs60:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs60 = set cs59 58 4)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 59 /\ infix_ls 59 cs) ->
  (forall cs61:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs61 = set cs60 59
  5)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  60 /\ infix_ls 60 cs) -> (forall cs62:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs62 = set cs61 60 6)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 61 /\ infix_ls 61 cs) ->
  (forall cs63:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs63 = set cs62 61
  7)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  62 /\ infix_ls 62 cs) -> (forall cs64:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs64 = set cs63 62 8)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 63 /\ infix_ls 63 cs) ->
  (forall cs65:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs65 = set cs64 63
  0)) -> ("asym_split" "stop_split" "expl:index in array bounds" infix_lseq 0
  64 /\ infix_ls 64 cs) -> (forall cs66:map int int. ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 cs) &&
  ("stop_split" (cs66 = set cs65 64 1)) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 65 /\ infix_ls 65 cs) ->
  (forall cs67:map int int. ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 cs) && ("stop_split" (cs67 = set cs66 65
  2)) -> ("asym_split" "expl:index in array bounds" infix_lseq 0 66 /\
  infix_ls 66
  cs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

end
