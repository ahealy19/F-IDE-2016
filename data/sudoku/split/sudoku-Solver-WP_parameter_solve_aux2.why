theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

type grid = map int int

predicate is_index (i:int) = infix_lseq 0 i /\ infix_ls i 81

predicate valid_values (g:map int int) = forall i:int. is_index i ->
  infix_lseq 0 (mixfix_lbrb g i) /\ infix_lseq (mixfix_lbrb g i) 9

predicate grid_eq_sub (g1:map int int) (g2:map int int) (a:int) (b:int) =
  forall j:int. infix_lseq a j /\ infix_ls j b -> (mixfix_lbrb g1
  j = mixfix_lbrb g2 j)

predicate grid_eq (g1:map int int) (g2:map int int) = grid_eq_sub g1 g2 0 81

axiom grid_eq_sub : forall g1:map int int, g2:map int int, a:int, b:int.
  (infix_lseq 0 a /\ infix_lseq a 81) /\ (infix_lseq 0 b /\ infix_lseq b
  81) /\ grid_eq g1 g2 -> grid_eq_sub g1 g2 a b

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type sudoku_chunks =
  | Mk_sudoku_chunks (column_start:array int) (column_offsets:array int)
      (row_start:array int) (row_offsets:array int) (square_start:array int)
      (square_offsets:array int)

predicate chunk_valid_indexes (start:array int) (offsets:array int) = (length
  start = 81) /\ (length offsets = 9) /\ (forall i:int, o:int. is_index i /\
  infix_lseq 0 o /\ infix_ls o 9 -> is_index (infix_pl (mixfix_lbrb1 start i)
  (mixfix_lbrb1 offsets o)))

predicate disjoint_chunks (start:array int) (offsets:array int) = (length
  start = 81) /\ (length offsets = 9) /\ (forall i1:int, i2:int, o:int.
  is_index i1 /\ is_index i2 /\ infix_lseq 0 o /\ infix_ls o 9 ->
  (let s1 = mixfix_lbrb1 start i1 in let s2 = mixfix_lbrb1 start i2 in
  not (s1 = s2) -> not (i1 = infix_pl s2 (mixfix_lbrb1 offsets o))))

predicate well_formed_sudoku (s:sudoku_chunks) = chunk_valid_indexes
  (column_start s) (column_offsets s) /\ chunk_valid_indexes (row_start s)
  (row_offsets s) /\ chunk_valid_indexes (square_start s) (square_offsets
  s) /\ disjoint_chunks (column_start s) (column_offsets s) /\
  disjoint_chunks (row_start s) (row_offsets s) /\ disjoint_chunks
  (square_start s) (square_offsets s)

predicate valid_chunk (g:map int int) (i:int) (start:array int) (offsets:
  array int) = let s = mixfix_lbrb1 start i in forall o1:int, o2:int.
  (infix_lseq 0 o1 /\ infix_ls o1 9) /\ (infix_lseq 0 o2 /\ infix_ls o2 9) /\
  not (o1 = o2) -> (let i1 = infix_pl s (mixfix_lbrb1 offsets o1) in
  let i2 = infix_pl s (mixfix_lbrb1 offsets o2) in (infix_lseq 1 (get g
  i1) /\ infix_lseq (get g i1) 9) /\ infix_lseq 1 (get g i2) /\ infix_lseq
  (get g i2) 9 -> not (get g i1 = get g i2))

predicate valid_column (s:sudoku_chunks) (g:map int int) (i:int) =
  valid_chunk g i (column_start s) (column_offsets s)

predicate valid_row (s:sudoku_chunks) (g:map int int) (i:int) = valid_chunk g
  i (row_start s) (row_offsets s)

predicate valid_square (s:sudoku_chunks) (g:map int int) (i:int) =
  valid_chunk g i (square_start s) (square_offsets s)

predicate valid (s:sudoku_chunks) (g:map int int) = forall i:int. is_index
  i -> valid_column s g i /\ valid_row s g i /\ valid_square s g i

predicate full (g:map int int) = forall i:int. is_index i -> infix_lseq 1
  (get g i) /\ infix_lseq (get g i) 9

predicate included (g1:map int int) (g2:map int int) = forall i:int. is_index
  i /\ infix_lseq 1 (get g1 i) /\ infix_lseq (get g1 i) 9 -> (get g2 i = get
  g1 i)

axiom subset_valid_chunk : forall g:map int int, h:map int int. included g
  h -> (forall i:int, s:array int, o:array int. is_index i /\
  chunk_valid_indexes s o /\ valid_chunk h i s o -> valid_chunk g i s o)

axiom subset_valid : forall s:sudoku_chunks, g:map int int, h:map int int.
  well_formed_sudoku s /\ included g h /\ valid s h -> valid s g

predicate is_solution_for (s:sudoku_chunks) (sol:map int int) (data:map int
  int) = included data sol /\ full sol /\ valid s sol

(* use Grid *)

predicate valid_chunk_up_to (g:map int int) (i:int) (start:array int)
  (offsets:array int) (off:int) = let s = mixfix_lbrb1 start i in forall o1:
  int, o2:int. (infix_lseq 0 o1 /\ infix_ls o1 off) /\ (infix_lseq 0 o2 /\
  infix_ls o2 off) /\ not (o1 = o2) ->
  (let i1 = infix_pl s (mixfix_lbrb1 offsets o1) in
  let i2 = infix_pl s (mixfix_lbrb1 offsets o2) in (infix_lseq 1 (get g
  i1) /\ infix_lseq (get g i1) 9) /\ infix_lseq 1 (get g i2) /\ infix_lseq
  (get g i2) 9 -> not (get g i1 = get g i2))

predicate valid_up_to (s:sudoku_chunks) (g:map int int) (i:int) = forall j:
  int. infix_lseq 0 j /\ infix_ls j i -> valid_column s g j /\ valid_row s g
  j /\ valid_square s g j

predicate full_up_to (g:map int int) (i:int) = forall j:int. infix_lseq 0
  j /\ infix_ls j i -> infix_lseq 1 (get g j) /\ infix_lseq (get g j) 9

axiom full_up_to_change : forall g:map int int, i:int, x:int. is_index i /\
  full_up_to g i -> infix_lseq 1 x /\ infix_lseq x 9 -> full_up_to (set g i
  x) (infix_pl i 1)

axiom full_up_to_frame "why3:lemma" : forall g1:map int int, g2:map int int,
  i:int. ("stop_split" infix_lseq 0 i /\ infix_lseq i 81) /\
  ("stop_split" grid_eq_sub g1 g2 0 i) /\ ("stop_split" full_up_to g1 i) ->
  ("stop_split" full_up_to g2 i)

axiom full_up_to_frame_all "why3:lemma" : forall g1:map int int, g2:map int
  int, i:int. ("stop_split" infix_lseq 0 i /\ infix_lseq i 81) /\
  ("stop_split" grid_eq g1 g2) /\ ("stop_split" full_up_to g1 i) ->
  ("stop_split" full_up_to g2 i)

axiom valid_unchanged_chunks : forall g:map int int, i1:int, i2:int, k:int,
  start:array int, offsets:array int. disjoint_chunks start offsets ->
  is_index i1 /\ is_index i2 /\ infix_lseq 1 k /\ infix_lseq k 9 ->
  (let s1 = mixfix_lbrb1 start i1 in let s2 = mixfix_lbrb1 start i2 in
  let h = set g i1 k in not (s1 = s2) /\ valid_chunk g i2 start offsets ->
  valid_chunk h i2 start offsets)

axiom valid_changed_chunks : forall g:map int int, i1:int, i2:int, k:int,
  start:array int, offsets:array int. is_index i1 /\ is_index i2 /\
  infix_lseq 1 k /\ infix_lseq k 9 -> (let s1 = mixfix_lbrb1 start i1 in
  let s2 = mixfix_lbrb1 start i2 in let h = set g i1 k in (s1 = s2) /\
  valid_chunk h i1 start offsets -> valid_chunk h i2 start offsets)

axiom valid_up_to_change : forall s:sudoku_chunks, g:map int int, i:int, x:
  int. well_formed_sudoku s /\ is_index i /\ valid_up_to s g i /\ (infix_lseq
  1 x /\ infix_lseq x 9) /\ valid_column s (set g i x) i /\ valid_row s (set
  g i x) i /\ valid_square s (set g i x) i -> valid_up_to s (set g i x)
  (infix_pl i 1)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_solve_aux "expl:VC for solve_aux" : forall s:int, s1:map
  int int, s2:int, s3:map int int, s4:int, s5:map int int, s6:int, s7:map int
  int, s8:int, s9:map int int, s10:int, s11:map int int, g:int, g1:map int
  int, i:int.
  let s12 = Mk_sudoku_chunks (Mk_array s s1) (Mk_array s2 s3) (Mk_array s4
            s5) (Mk_array s6 s7) (Mk_array s8 s9) (Mk_array s10 s11) in
  ("asym_split" (("stop_split" "expl:type invariant" infix_lseq 0 s) /\
  ("stop_split" "expl:type invariant" infix_lseq 0 s2) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 s4) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 s6) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 s8) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 s10)) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 g)) && ("stop_split" well_formed_sudoku
  s12) /\ ("stop_split" (g = 81)) /\ ("stop_split" valid_values g1) /\
  ("stop_split" infix_lseq 0 i /\ infix_lseq i 81) /\
  ("stop_split" valid_up_to s12 g1 i) /\ ("stop_split" full_up_to g1 i) ->
  not (i = 81) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 i /\ infix_ls i g) -> not (get g1
  i = 0) -> (let o = Mk_array s2 s3 in let o1 = Mk_array s s1 in
  "expl:precondition" (g = 81))

end
