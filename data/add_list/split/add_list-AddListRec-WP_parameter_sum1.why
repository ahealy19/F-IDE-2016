theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

function zero5 : real = 0.0

function one3 : real = 1.0

predicate infix_ls1 real real

predicate infix_gt1 (x:real) (y:real) = infix_ls1 y x

predicate infix_lseq2 (x:real) (y:real) = infix_ls1 x y \/ (x = y)

function infix_pl5 real real : real

function prefix_mn5 real : real

function infix_as5 real real : real

axiom Assoc14 : forall x:real, y:real, z:real. (infix_pl5 (infix_pl5 x y)
  z = infix_pl5 x (infix_pl5 y z))

(* clone algebra.Assoc with type t = real, function op = infix_pl5,
  prop Assoc1 = Assoc14 *)

axiom Unit_def_l8 : forall x:real. (infix_pl5 zero5 x = x)

axiom Unit_def_r8 : forall x:real. (infix_pl5 x zero5 = x)

(* clone algebra.Monoid with type t1 = real, function unit = zero5,
  function op1 = infix_pl5, prop Unit_def_r1 = Unit_def_r8,
  prop Unit_def_l1 = Unit_def_l8, prop Assoc2 = Assoc14 *)

axiom Inv_def_l7 : forall x:real. (infix_pl5 (prefix_mn5 x) x = zero5)

axiom Inv_def_r7 : forall x:real. (infix_pl5 x (prefix_mn5 x) = zero5)

(* clone algebra.Group with type t2 = real, function inv = prefix_mn5,
  function unit1 = zero5, function op2 = infix_pl5,
  prop Inv_def_r1 = Inv_def_r7, prop Inv_def_l1 = Inv_def_l7,
  prop Unit_def_r2 = Unit_def_r8, prop Unit_def_l2 = Unit_def_l8,
  prop Assoc3 = Assoc14 *)

axiom Comm11 : forall x:real, y:real. (infix_pl5 x y = infix_pl5 y x)

(* clone algebra.Comm with type t3 = real, function op3 = infix_pl5,
  prop Comm1 = Comm11 *)

(* meta AC function infix_pl5 *)

(* clone algebra.CommutativeGroup with type t4 = real,
  function inv1 = prefix_mn5, function unit2 = zero5,
  function op4 = infix_pl5, prop Comm2 = Comm11,
  prop Inv_def_r2 = Inv_def_r7, prop Inv_def_l2 = Inv_def_l7,
  prop Unit_def_r3 = Unit_def_r8, prop Unit_def_l3 = Unit_def_l8,
  prop Assoc4 = Assoc14 *)

axiom Assoc15 : forall x:real, y:real, z:real. (infix_as5 (infix_as5 x y)
  z = infix_as5 x (infix_as5 y z))

(* clone algebra.Assoc with type t = real, function op = infix_as5,
  prop Assoc1 = Assoc15 *)

axiom Mul_distr_l5 : forall x:real, y:real, z:real. (infix_as5 x (infix_pl5 y
  z) = infix_pl5 (infix_as5 x y) (infix_as5 x z))

axiom Mul_distr_r5 : forall x:real, y:real, z:real. (infix_as5 (infix_pl5 y
  z) x = infix_pl5 (infix_as5 y x) (infix_as5 z x))

function infix_mn5 (x:real) (y:real) : real = infix_pl5 x (prefix_mn5 y)

(* clone algebra.Ring with type t5 = real, function infix_mn1 = infix_mn5,
  function infix_as1 = infix_as5, function prefix_mn1 = prefix_mn5,
  function infix_pl1 = infix_pl5, function zero1 = zero5,
  prop Mul_distr_r1 = Mul_distr_r5, prop Mul_distr_l1 = Mul_distr_l5,
  prop Assoc6 = Assoc15, prop Comm3 = Comm11, prop Inv_def_r3 = Inv_def_r7,
  prop Inv_def_l3 = Inv_def_l7, prop Unit_def_r4 = Unit_def_r8,
  prop Unit_def_l4 = Unit_def_l8, prop Assoc7 = Assoc14 *)

axiom Comm12 : forall x:real, y:real. (infix_as5 x y = infix_as5 y x)

(* clone algebra.Comm with type t3 = real, function op3 = infix_as5,
  prop Comm1 = Comm12 *)

(* meta AC function infix_as5 *)

(* clone algebra.CommutativeRing with type t6 = real,
  function infix_mn2 = infix_mn5, function infix_as2 = infix_as5,
  function prefix_mn2 = prefix_mn5, function infix_pl2 = infix_pl5,
  function zero2 = zero5, prop Comm5 = Comm12,
  prop Mul_distr_r2 = Mul_distr_r5, prop Mul_distr_l2 = Mul_distr_l5,
  prop Assoc8 = Assoc15, prop Comm6 = Comm11, prop Inv_def_r4 = Inv_def_r7,
  prop Inv_def_l4 = Inv_def_l7, prop Unit_def_r5 = Unit_def_r8,
  prop Unit_def_l5 = Unit_def_l8, prop Assoc9 = Assoc14 *)

axiom Unitary3 : forall x:real. (infix_as5 one3 x = x)

axiom NonTrivialRing3 : not (zero5 = one3)

(* clone algebra.UnitaryCommutativeRing with type t7 = real,
  function one1 = one3, function infix_mn3 = infix_mn5,
  function infix_as3 = infix_as5, function prefix_mn3 = prefix_mn5,
  function infix_pl3 = infix_pl5, function zero3 = zero5,
  prop NonTrivialRing1 = NonTrivialRing3, prop Unitary1 = Unitary3,
  prop Comm7 = Comm12, prop Mul_distr_r3 = Mul_distr_r5,
  prop Mul_distr_l3 = Mul_distr_l5, prop Assoc10 = Assoc15,
  prop Comm8 = Comm11, prop Inv_def_r5 = Inv_def_r7,
  prop Inv_def_l5 = Inv_def_l7, prop Unit_def_r6 = Unit_def_r8,
  prop Unit_def_l6 = Unit_def_l8, prop Assoc11 = Assoc14 *)

function inv2 real : real

axiom Inverse : forall x:real. not (x = zero5) -> (infix_as5 x (inv2
  x) = one3)

function infix_sl (x:real) (y:real) : real = infix_as5 x (inv2 y)

axiom add_div : forall x:real, y:real, z:real. not (z = zero5) -> (infix_sl
  (infix_pl5 x y) z = infix_pl5 (infix_sl x z) (infix_sl y z))

axiom sub_div : forall x:real, y:real, z:real. not (z = zero5) -> (infix_sl
  (infix_mn5 x y) z = infix_mn5 (infix_sl x z) (infix_sl y z))

axiom neg_div : forall x:real, y:real. not (y = zero5) -> (infix_sl
  (prefix_mn5 x) y = prefix_mn5 (infix_sl x y))

axiom assoc_mul_div : forall x:real, y:real, z:real. not (z = zero5) ->
  (infix_sl (infix_as5 x y) z = infix_as5 x (infix_sl y z))

axiom assoc_div_mul : forall x:real, y:real, z:real. not (y = zero5) /\
  not (z = zero5) -> (infix_sl (infix_sl x y) z = infix_sl x (infix_as5 y z))

axiom assoc_div_div : forall x:real, y:real, z:real. not (y = zero5) /\
  not (z = zero5) -> (infix_sl x (infix_sl y z) = infix_sl (infix_as5 x z) y)

(* clone algebra.Field with type t17 = real, function infix_sl1 = infix_sl,
  function inv3 = inv2, function one4 = one3, function infix_mn6 = infix_mn5,
  function infix_as6 = infix_as5, function prefix_mn6 = prefix_mn5,
  function infix_pl6 = infix_pl5, function zero6 = zero5,
  prop assoc_div_div1 = assoc_div_div, prop assoc_div_mul1 = assoc_div_mul,
  prop assoc_mul_div1 = assoc_mul_div, prop neg_div1 = neg_div,
  prop sub_div1 = sub_div, prop add_div1 = add_div, prop Inverse1 = Inverse,
  prop NonTrivialRing4 = NonTrivialRing3, prop Unitary4 = Unitary3,
  prop Comm13 = Comm12, prop Mul_distr_r6 = Mul_distr_r5,
  prop Mul_distr_l6 = Mul_distr_l5, prop Assoc16 = Assoc15,
  prop Comm14 = Comm11, prop Inv_def_r8 = Inv_def_r7,
  prop Inv_def_l8 = Inv_def_l7, prop Unit_def_r9 = Unit_def_r8,
  prop Unit_def_l9 = Unit_def_l8, prop Assoc17 = Assoc14 *)

predicate infix_gteq2 (x:real) (y:real) = infix_lseq2 y x

(* clone relations.EndoRelation with type t8 = real,
  predicate rel = infix_lseq2,  *)

axiom Refl6 : forall x:real. infix_lseq2 x x

(* clone relations.Reflexive with type t9 = real,
  predicate rel1 = infix_lseq2, prop Refl1 = Refl6 *)

(* clone relations.EndoRelation with type t8 = real,
  predicate rel = infix_lseq2,  *)

axiom Trans6 : forall x:real, y:real, z:real. infix_lseq2 x y -> infix_lseq2
  y z -> infix_lseq2 x z

(* clone relations.Transitive with type t10 = real,
  predicate rel2 = infix_lseq2, prop Trans1 = Trans6 *)

(* clone relations.PreOrder with type t11 = real,
  predicate rel3 = infix_lseq2, prop Trans2 = Trans6, prop Refl2 = Refl6 *)

(* clone relations.EndoRelation with type t8 = real,
  predicate rel = infix_lseq2,  *)

axiom Antisymm5 : forall x:real, y:real. infix_lseq2 x y -> infix_lseq2 y
  x -> (x = y)

(* clone relations.Antisymmetric with type t12 = real,
  predicate rel4 = infix_lseq2, prop Antisymm1 = Antisymm5 *)

(* clone relations.PartialOrder with type t13 = real,
  predicate rel5 = infix_lseq2, prop Antisymm2 = Antisymm5,
  prop Trans3 = Trans6, prop Refl3 = Refl6 *)

(* clone relations.EndoRelation with type t8 = real,
  predicate rel = infix_lseq2,  *)

axiom Total4 : forall x:real, y:real. infix_lseq2 x y \/ infix_lseq2 y x

(* clone relations.Total with type t14 = real, predicate rel6 = infix_lseq2,
  prop Total1 = Total4 *)

(* clone relations.TotalOrder with type t15 = real,
  predicate rel7 = infix_lseq2, prop Total2 = Total4,
  prop Antisymm3 = Antisymm5, prop Trans4 = Trans6, prop Refl4 = Refl6 *)

axiom ZeroLessOne2 : infix_lseq2 zero5 one3

axiom CompatOrderAdd2 : forall x:real, y:real, z:real. infix_lseq2 x y ->
  infix_lseq2 (infix_pl5 x z) (infix_pl5 y z)

axiom CompatOrderMult2 : forall x:real, y:real, z:real. infix_lseq2 x y ->
  infix_lseq2 zero5 z -> infix_lseq2 (infix_as5 x z) (infix_as5 y z)

(* clone algebra.OrderedField with type t18 = real,
  predicate infix_gteq3 = infix_gteq2, predicate infix_lseq3 = infix_lseq2,
  function infix_sl2 = infix_sl, function inv4 = inv2, function one5 = one3,
  function infix_mn7 = infix_mn5, function infix_as7 = infix_as5,
  function prefix_mn7 = prefix_mn5, function infix_pl7 = infix_pl5,
  function zero7 = zero5, prop CompatOrderMult3 = CompatOrderMult2,
  prop CompatOrderAdd3 = CompatOrderAdd2, prop ZeroLessOne3 = ZeroLessOne2,
  prop Total5 = Total4, prop Antisymm6 = Antisymm5, prop Trans7 = Trans6,
  prop Refl7 = Refl6, prop assoc_div_div2 = assoc_div_div,
  prop assoc_div_mul2 = assoc_div_mul, prop assoc_mul_div2 = assoc_mul_div,
  prop neg_div2 = neg_div, prop sub_div2 = sub_div, prop add_div2 = add_div,
  prop Inverse2 = Inverse, prop NonTrivialRing5 = NonTrivialRing3,
  prop Unitary5 = Unitary3, prop Comm15 = Comm12,
  prop Mul_distr_r7 = Mul_distr_r5, prop Mul_distr_l7 = Mul_distr_l5,
  prop Assoc18 = Assoc15, prop Comm16 = Comm11, prop Inv_def_r9 = Inv_def_r7,
  prop Inv_def_l9 = Inv_def_l7, prop Unit_def_r10 = Unit_def_r8,
  prop Unit_def_l10 = Unit_def_l8, prop Assoc19 = Assoc14 *)

(* use real.Real *)

function infix_pldt (x:real) (y:real) : real = infix_pl5 x y

function infix_mndt (x:real) (y:real) : real = infix_mn5 x y

function infix_asdt (x:real) (y:real) : real = infix_as5 x y

function infix_sldt (x:real) (y:real) : real = infix_sl x y

function prefix_mndt (x:real) : real = prefix_mn5 x

function inv5 (x:real) : real = inv2 x

predicate infix_lseqdt (x:real) (y:real) = infix_lseq2 x y

predicate infix_gteqdt (x:real) (y:real) = infix_gteq2 x y

predicate infix_lsdt (x:real) (y:real) = infix_ls1 x y

predicate infix_gtdt (x:real) (y:real) = infix_gt1 x y

(* use real.RealInfix *)

type list 'a =
  | Nil
  | Cons 'a (list 'a)

(* use list.List *)

type or_integer_float =
  | Integer int
  | Real1 real

function add_int (e:list or_integer_float) : int =
  match e with
  | Nil -> 0
  | Cons (Integer n) t -> infix_pl n (add_int t)
  | Cons _ t -> add_int t
  end

function add_real (e:list or_integer_float) : real =
  match e with
  | Nil -> 0.0
  | Cons (Real1 x) t -> infix_pldt x (add_real t)
  | Cons _ t -> add_real t
  end

(* use SumList *)

type tuple2 'a 'a1 =
  | Tuple2 'a 'a1

(* use why3.Tuple2.Tuple21 *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_sum "expl:VC for sum" : forall l:list or_integer_float.
  forall x:or_integer_float, x1:list or_integer_float. (l = Cons x x1) ->
  ("expl:variant decrease" match l with
  | Nil -> false
  | Cons _ f -> (f = x1)
  end)

end
