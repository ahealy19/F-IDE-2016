theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type expr =
  | Cte int
  | Sub expr expr

type prog = expr

function p0 : expr = Cte 0

function p1 : expr = Sub (Cte 10) (Cte 6)

function p2 : expr = Sub (Sub (Cte 10) (Cte 6)) (Sub (Cte 7) (Cte 2))

function p3 : expr = Sub (Sub (Cte 7) (Cte 2)) (Sub (Cte 10) (Cte 6))

function p4 : expr = Sub (Cte 10) (Sub (Cte 2) (Cte 3))

(* use Expr *)

type value =
  | Vnum int
  | Underflow

function eval_01 (e:expr) : value =
  match e with
  | Cte n -> if infix_gteq n 0 then Vnum n else Underflow
  | Sub e1 e2 ->
      match eval_01 e1 with
      | Underflow -> Underflow
      | Vnum v1 ->
          match eval_01 e2 with
          | Underflow -> Underflow
          | Vnum v2 -> if infix_gteq v1 v2 then Vnum (infix_mn v1 v2)
              else Underflow
          end
      end
  end

function interpret_01 (p:expr) : value = eval_01 p

type func 'a 'b

type pred 'a = func 'a bool

function infix_at (func 'a 'b) 'a : 'b

(* use why3.HighOrd.HighOrd *)

function eval_11 (e:expr) (k:func value 'a) : 'a =
  match e with
  | Cte n -> infix_at k (if infix_gteq n 0 then Vnum n else Underflow)
  | Sub e1 e2 -> eval_11 e1 (\ v1:value.
      match v1 with
      | Underflow -> infix_at k Underflow
      | Vnum v11 -> eval_11 e2 (\ v2:value.
          match v2 with
          | Underflow -> infix_at k Underflow
          | Vnum v21 -> infix_at k (if infix_gteq v11 v21 then Vnum (infix_mn
              v11 v21) else Underflow)
          end)
      end)
  end

function interpret_11 (p:expr) : value = eval_11 p (\ n:value. n)

axiom cps_correct_expr1 : forall e:expr. forall k:func value 'a. (eval_11 e
  k = infix_at k (eval_01 e))

axiom cps_correct1 : forall p:expr. (interpret_11 p = interpret_01 p)

function eval_2 (e:expr) (k:func int 'a) (kerr:func tuple0 'a) : 'a =
  match e with
  | Cte n -> if infix_gteq n 0 then infix_at k n else infix_at kerr Tuple0
  | Sub e1 e2 -> eval_2 e1 (eval_2a e2 k kerr) kerr
  end

with eval_2a (e2:expr) (k:func int 'a) (kerr:func tuple0 'a) : func int 'a =
  \ v1:int. eval_2 e2 (eval_2b v1 k kerr) kerr

with eval_2b (v1:int) (k:func int 'a) (kerr:func tuple0 'a) : func int 'a =
  \ v2:int. if infix_gteq v1 v2 then infix_at k (infix_mn v1 v2)
  else infix_at kerr Tuple0

function interpret_2 (p:expr) : value = eval_2 p (\ n:int. Vnum n) (\ us:
  tuple0. Underflow)

axiom cps2_correct_expr_aux : forall k:func int 'a, e1:expr, e2:expr, kerr:
  func tuple0 'a. (eval_2 (Sub e1 e2) k kerr = eval_2 e1 (eval_2a e2 k kerr)
  kerr)

axiom cps2_correct_expr : forall e:expr, kerr:func tuple0 'a, k:func int 'a.
  (eval_2 e k
  kerr = match eval_01 e with
  | Vnum n -> infix_at k n
  | Underflow -> infix_at kerr Tuple0
  end)

axiom cps2_correct : forall p:expr. (interpret_2 p = interpret_01 p)

function eval_3 (e:expr) (k:func int value) : value =
  match e with
  | Cte n -> if infix_gteq n 0 then infix_at k n else Underflow
  | Sub e1 e2 -> eval_3 e1 (eval_3a e2 k)
  end

with eval_3a (e2:expr) (k:func int value) : func int value = \ v1:int. eval_3
  e2 (eval_3b v1 k)

with eval_3b (v1:int) (k:func int value) : func int value = \ v2:int.
  if infix_gteq v1 v2 then infix_at k (infix_mn v1 v2) else Underflow

function interpret_3 (p:expr) : value = eval_3 p (\ n:int. Vnum n)

axiom cps3_correct_expr "why3:lemma" : forall e:expr. "stop_split" forall k:
  func int value. (eval_3 e
  k = match eval_01 e with
  | Vnum n -> infix_at k n
  | Underflow -> Underflow
  end)

axiom cps3_correct : forall p:expr. (interpret_3 p = interpret_01 p)

type cont2 =
  | I2
  | A expr cont2
  | B int cont2

inductive eval_cont2 cont2 value value =
  | underflow : forall k:cont2. eval_cont2 k Underflow Underflow
  | a12 : forall e2:expr, k:cont2, v:int, r:value. eval_cont2 (B v k)
      (eval_01 e2) r -> eval_cont2 (A e2 k) (Vnum v) r
  | a22 : forall v1:int, k:cont2, v:int, r:value. eval_cont2 k
      (if infix_gteq v1 v then Vnum (infix_mn v1 v) else Underflow) r ->
      eval_cont2 (B v1 k) (Vnum v) r
  | a32 : forall v:int. eval_cont2 I2 (Vnum v) (Vnum v)

function size_e2 (e:expr) : int =
  match e with
  | Cte _ -> 1
  | Sub e1 e2 -> infix_pl (infix_pl 3 (size_e2 e1)) (size_e2 e2)
  end

axiom size_e_pos1 : forall e:expr. infix_gteq (size_e2 e) 1

function eval_0 (e:expr) : int =
  match e with
  | Cte n -> n
  | Sub e1 e2 -> infix_mn (eval_0 e1) (eval_0 e2)
  end

function interpret_0 (p:expr) : int = eval_0 p

type tuple5 'a 'a1 'a2 'a3 'a4 =
  | Tuple5 'a 'a1 'a2 'a3 'a4

(* use why3.Tuple5.Tuple51 *)

function v3 : int = eval_0 p3

(* use DirectSem *)

type cont =
  | A1 expr cont
  | A2 int cont
  | I

inductive eval_cont cont int int =
  | a1 : forall e2:expr, k:cont, v:int, r:int. eval_cont (A2 v k) (eval_0 e2)
      r -> eval_cont (A1 e2 k) v r
  | a2 : forall v1:int, k:cont, v:int, r:int. eval_cont k (infix_mn v1 v)
      r -> eval_cont (A2 v1 k) v r
  | a3 : forall v:int. eval_cont I v v

function size_e (e:expr) : int =
  match e with
  | Cte _ -> 1
  | Sub e1 e2 -> infix_pl (infix_pl 3 (size_e e1)) (size_e e2)
  end

axiom size_e_pos : forall e:expr. infix_gteq (size_e e) 1

function size_c (c:cont) : int =
  match c with
  | I -> 0
  | A1 e2 k -> infix_pl (infix_pl 2 (size_e e2)) (size_c k)
  | A2 _ k -> infix_pl 1 (size_c k)
  end

axiom size_c_pos : forall c:cont. infix_gteq (size_c c) 0

(* use Defunctionalization *)

function size_c2 (c:cont2) : int =
  match c with
  | I2 -> 0
  | A e2 k -> infix_pl (infix_pl 2 (size_e e2)) (size_c2 k)
  | B _ k -> infix_pl 1 (size_c2 k)
  end

axiom size_c_pos1 : forall c:cont2. infix_gteq (size_c2 c) 0

(* use SemWithError *)

type context1 =
  | Empty1
  | Left1 context1 expr
  | Right1 int context1

function size_e4 (e:expr) : int = size_e e

function size_c4 (c:context1) : int =
  match c with
  | Empty1 -> 0
  | Left1 c1 e -> infix_pl (infix_pl 2 (size_c4 c1)) (size_e4 e)
  | Right1 _ c1 -> infix_pl 1 (size_c4 c1)
  end

axiom size_c_pos3 : forall c:context1. infix_gteq (size_c4 c) 0

function recompose1 (c:context1) (e:expr) : expr =
  match c with
  | Empty1 -> e
  | Left1 c1 e2 -> recompose1 c1 (Sub e e2)
  | Right1 n1 c1 -> recompose1 c1 (Sub (Cte n1) e)
  end

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_recompose_values1 "why3:lemma"
  "expl:VC for recompose_values" : forall c:context1, e1:expr, e2:expr.
  ("stop_split" (eval_01 e1 = eval_01 e2)) -> (forall x:int, x1:context1.
  (c = Right1 x x1) -> (let o = Sub (Cte x) e2 in let o1 = Sub (Cte x) e1 in
  ("asym_split" "stop_split" "expl:precondition" (eval_01 o1 = eval_01 o)) ->
  ("stop_split" (eval_01 (recompose1 x1 o1) = eval_01 (recompose1 x1 o))) ->
  ("expl:postcondition" (eval_01 (recompose1 c e1) = eval_01 (recompose1 c
  e2)))))

end
