theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

function size : int = 64

function two_power_size : int = 0x10000000000000000

function max_int : int = 0xFFFFFFFFFFFFFFFF

function andb (x:bool) (y:bool) : bool =
  match x with
  | True -> y
  | False -> False
  end

function orb (x:bool) (y:bool) : bool =
  match x with
  | False -> y
  | True -> True
  end

function notb (x:bool) : bool = match x with
  | False -> True
  | True -> False
  end

function xorb (x:bool) (y:bool) : bool =
  match x with
  | False -> y
  | True -> notb y
  end

function implb (x:bool) (y:bool) : bool =
  match x with
  | False -> True
  | True -> y
  end

(* use bool.Bool1 *)

type t17

function nth t17 int : bool

axiom nth_out_of_bound : forall x:t17, n:int. infix_ls n 0 \/ infix_gteq n
  size -> (nth x n = False)

function zeros : t17

axiom Nth_zeros : forall n:int. (nth zeros n = False)

function ones : t17

axiom Nth_ones : forall n:int. infix_lseq 0 n /\ infix_ls n size -> (nth ones
  n = True)

function bw_and t17 t17 : t17

axiom Nth_bw_and : forall v1:t17, v2:t17, n:int. infix_lseq 0 n /\ infix_ls n
  size -> (nth (bw_and v1 v2) n = andb (nth v1 n) (nth v2 n))

function bw_or t17 t17 : t17

axiom Nth_bw_or : forall v1:t17, v2:t17, n:int. infix_lseq 0 n /\ infix_ls n
  size -> (nth (bw_or v1 v2) n = orb (nth v1 n) (nth v2 n))

function bw_xor t17 t17 : t17

axiom Nth_bw_xor : forall v1:t17, v2:t17, n:int. infix_lseq 0 n /\ infix_ls n
  size -> (nth (bw_xor v1 v2) n = xorb (nth v1 n) (nth v2 n))

function bw_not t17 : t17

axiom Nth_bw_not : forall v:t17, n:int. infix_lseq 0 n /\ infix_ls n size ->
  (nth (bw_not v) n = notb (nth v n))

function lsr t17 int : t17

axiom Lsr_nth_low : forall b:t17, n:int, s:int. infix_lseq 0 s -> infix_lseq
  0 n -> infix_ls (infix_pl n s) size -> (nth (lsr b s) n = nth b (infix_pl n
  s))

axiom Lsr_nth_high : forall b:t17, n:int, s:int. infix_lseq 0 s -> infix_lseq
  0 n -> infix_gteq (infix_pl n s) size -> (nth (lsr b s) n = False)

axiom lsr_zeros : forall x:t17. (lsr x 0 = x)

function asr t17 int : t17

axiom Asr_nth_low : forall b:t17, n:int, s:int. infix_lseq 0 s -> infix_lseq
  0 n /\ infix_ls n size -> infix_ls (infix_pl n s) size -> (nth (asr b s)
  n = nth b (infix_pl n s))

axiom Asr_nth_high : forall b:t17, n:int, s:int. infix_lseq 0 s -> infix_lseq
  0 n /\ infix_ls n size -> infix_gteq (infix_pl n s) size -> (nth (asr b s)
  n = nth b (infix_mn size 1))

axiom asr_zeros : forall x:t17. (asr x 0 = x)

function lsl t17 int : t17

axiom Lsl_nth_high : forall b:t17, n:int, s:int. infix_lseq 0 s /\ infix_lseq
  s n /\ infix_ls n size -> (nth (lsl b s) n = nth b (infix_mn n s))

axiom Lsl_nth_low : forall b:t17, n:int, s:int. infix_lseq 0 n /\ infix_ls n
  s -> (nth (lsl b s) n = False)

axiom lsl_zeros : forall x:t17. (lsl x 0 = x)

function abs (x:int) : int = if infix_gteq x 0 then x else prefix_mn x

axiom Abs_le : forall x:int, y:int. infix_lseq (abs x) y <-> infix_lseq
  (prefix_mn y) x /\ infix_lseq x y

axiom Abs_pos : forall x:int. infix_gteq (abs x) 0

(* use int.Abs *)

function div int int : int

function mod int int : int

axiom Div_mod : forall x:int, y:int. not (y = 0) -> (x = infix_pl (infix_as y
  (div x y)) (mod x y))

axiom Mod_bound : forall x:int, y:int. not (y = 0) -> infix_lseq 0 (mod x
  y) /\ infix_ls (mod x y) (abs y)

axiom Div_unique : forall x:int, y:int, q:int. infix_gt y 0 -> infix_lseq
  (infix_as q y) x /\ infix_ls x (infix_pl (infix_as q y) y) -> (div x y = q)

axiom Div_bound : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_lseq 0 (div x y) /\ infix_lseq (div x y) x

axiom Mod_1 : forall x:int. (mod x 1 = 0)

axiom Div_1 : forall x:int. (div x 1 = x)

axiom Div_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (div x
  y = 0)

axiom Div_inf_neg : forall x:int, y:int. infix_ls 0 x /\ infix_lseq x y ->
  (div (prefix_mn x) y = prefix_mn 1)

axiom Mod_0 : forall y:int. not (y = 0) -> (mod 0 y = 0)

axiom Div_1_left : forall y:int. infix_gt y 1 -> (div 1 y = 0)

axiom Div_minus1_left : forall y:int. infix_gt y 1 -> (div (prefix_mn 1)
  y = prefix_mn 1)

axiom Mod_1_left : forall y:int. infix_gt y 1 -> (mod 1 y = 1)

axiom Mod_minus1_left : forall y:int. infix_gt y 1 -> (mod (prefix_mn 1)
  y = infix_mn y 1)

axiom Div_mult : forall x:int, y:int, z:int [div (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 -> (div (infix_pl (infix_as x y) z) x = infix_pl y (div z
  x))

axiom Mod_mult : forall x:int, y:int, z:int [mod (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 -> (mod (infix_pl (infix_as x y) z) x = mod z x)

(* use int.EuclideanDivision *)

function rotate_right t17 int : t17

axiom Nth_rotate_right : forall v:t17, n:int, i:int. infix_lseq 0 i /\
  infix_ls i size -> infix_lseq 0 n -> (nth (rotate_right v n) i = nth v (mod
  (infix_pl i n) size))

function rotate_left t17 int : t17

axiom Nth_rotate_left : forall v:t17, n:int, i:int. infix_lseq 0 i /\
  infix_ls i size -> infix_lseq 0 n -> (nth (rotate_left v n) i = nth v (mod
  (infix_mn i n) size))

function pow2 int : int

axiom Power_0 : (pow2 0 = 1)

axiom Power_s : forall n:int. infix_gteq n 0 -> (pow2 (infix_pl n
  1) = infix_as 2 (pow2 n))

axiom Power_1 : (pow2 1 = 2)

axiom Power_sum : forall n:int, m:int. infix_gteq n 0 /\ infix_gteq m 0 ->
  (pow2 (infix_pl n m) = infix_as (pow2 n) (pow2 m))

axiom pow2pos : forall i:int. infix_gteq i 0 -> infix_gt (pow2 i) 0

axiom pow2_0 : (pow2 0 = 0x1)

axiom pow2_1 : (pow2 1 = 0x2)

axiom pow2_2 : (pow2 2 = 0x4)

axiom pow2_3 : (pow2 3 = 0x8)

axiom pow2_4 : (pow2 4 = 0x10)

axiom pow2_5 : (pow2 5 = 0x20)

axiom pow2_6 : (pow2 6 = 0x40)

axiom pow2_7 : (pow2 7 = 0x80)

axiom pow2_8 : (pow2 8 = 0x100)

axiom pow2_9 : (pow2 9 = 0x200)

axiom pow2_10 : (pow2 10 = 0x400)

axiom pow2_11 : (pow2 11 = 0x800)

axiom pow2_12 : (pow2 12 = 0x1000)

axiom pow2_13 : (pow2 13 = 0x2000)

axiom pow2_14 : (pow2 14 = 0x4000)

axiom pow2_15 : (pow2 15 = 0x8000)

axiom pow2_16 : (pow2 16 = 0x10000)

axiom pow2_17 : (pow2 17 = 0x20000)

axiom pow2_18 : (pow2 18 = 0x40000)

axiom pow2_19 : (pow2 19 = 0x80000)

axiom pow2_20 : (pow2 20 = 0x100000)

axiom pow2_21 : (pow2 21 = 0x200000)

axiom pow2_22 : (pow2 22 = 0x400000)

axiom pow2_23 : (pow2 23 = 0x800000)

axiom pow2_24 : (pow2 24 = 0x1000000)

axiom pow2_25 : (pow2 25 = 0x2000000)

axiom pow2_26 : (pow2 26 = 0x4000000)

axiom pow2_27 : (pow2 27 = 0x8000000)

axiom pow2_28 : (pow2 28 = 0x10000000)

axiom pow2_29 : (pow2 29 = 0x20000000)

axiom pow2_30 : (pow2 30 = 0x40000000)

axiom pow2_31 : (pow2 31 = 0x80000000)

axiom pow2_32 : (pow2 32 = 0x100000000)

axiom pow2_33 : (pow2 33 = 0x200000000)

axiom pow2_34 : (pow2 34 = 0x400000000)

axiom pow2_35 : (pow2 35 = 0x800000000)

axiom pow2_36 : (pow2 36 = 0x1000000000)

axiom pow2_37 : (pow2 37 = 0x2000000000)

axiom pow2_38 : (pow2 38 = 0x4000000000)

axiom pow2_39 : (pow2 39 = 0x8000000000)

axiom pow2_40 : (pow2 40 = 0x10000000000)

axiom pow2_41 : (pow2 41 = 0x20000000000)

axiom pow2_42 : (pow2 42 = 0x40000000000)

axiom pow2_43 : (pow2 43 = 0x80000000000)

axiom pow2_44 : (pow2 44 = 0x100000000000)

axiom pow2_45 : (pow2 45 = 0x200000000000)

axiom pow2_46 : (pow2 46 = 0x400000000000)

axiom pow2_47 : (pow2 47 = 0x800000000000)

axiom pow2_48 : (pow2 48 = 0x1000000000000)

axiom pow2_49 : (pow2 49 = 0x2000000000000)

axiom pow2_50 : (pow2 50 = 0x4000000000000)

axiom pow2_51 : (pow2 51 = 0x8000000000000)

axiom pow2_52 : (pow2 52 = 0x10000000000000)

axiom pow2_53 : (pow2 53 = 0x20000000000000)

axiom pow2_54 : (pow2 54 = 0x40000000000000)

axiom pow2_55 : (pow2 55 = 0x80000000000000)

axiom pow2_56 : (pow2 56 = 0x100000000000000)

axiom pow2_57 : (pow2 57 = 0x200000000000000)

axiom pow2_58 : (pow2 58 = 0x400000000000000)

axiom pow2_59 : (pow2 59 = 0x800000000000000)

axiom pow2_60 : (pow2 60 = 0x1000000000000000)

axiom pow2_61 : (pow2 61 = 0x2000000000000000)

axiom pow2_62 : (pow2 62 = 0x4000000000000000)

axiom pow2_63 : (pow2 63 = 0x8000000000000000)

axiom pow2_64 : (pow2 64 = 0x10000000000000000)

(* use bv.Pow2int *)

function to_int t17 : int

function to_uint t17 : int

function of_int int : t17

axiom to_uint_extensionality : forall v:t17, vqt:t17. (to_uint v = to_uint
  vqt) -> (v = vqt)

axiom to_int_extensionality : forall v:t17, vqt:t17. (to_int v = to_int
  vqt) -> (v = vqt)

predicate uint_in_range (i:int) = infix_lseq 0 i /\ infix_lseq i max_int

axiom to_uint_bounds : forall v:t17. infix_lseq 0 (to_uint v) /\ infix_ls
  (to_uint v) two_power_size

axiom to_uint_of_int : forall i:int. infix_lseq 0 i /\ infix_ls i
  two_power_size -> (to_uint (of_int i) = i)

function size_bv : t17 = of_int size

axiom Of_int_zeros : (zeros = of_int 0)

axiom Of_int_ones : (ones = of_int max_int)

predicate ult (x:t17) (y:t17) = infix_ls (to_uint x) (to_uint y)

predicate ule (x:t17) (y:t17) = infix_lseq (to_uint x) (to_uint y)

predicate ugt (x:t17) (y:t17) = infix_gt (to_uint x) (to_uint y)

predicate uge (x:t17) (y:t17) = infix_gteq (to_uint x) (to_uint y)

predicate slt (v1:t17) (v2:t17) = infix_ls (to_int v1) (to_int v2)

predicate sle (v1:t17) (v2:t17) = infix_lseq (to_int v1) (to_int v2)

predicate sgt (v1:t17) (v2:t17) = infix_gt (to_int v1) (to_int v2)

predicate sge (v1:t17) (v2:t17) = infix_gteq (to_int v1) (to_int v2)

function add t17 t17 : t17

axiom to_uint_add : forall v1:t17, v2:t17. (to_uint (add v1 v2) = mod
  (infix_pl (to_uint v1) (to_uint v2)) two_power_size)

axiom to_uint_add_bounded : forall v1:t17, v2:t17. infix_ls (infix_pl
  (to_uint v1) (to_uint v2)) two_power_size -> (to_uint (add v1
  v2) = infix_pl (to_uint v1) (to_uint v2))

function sub t17 t17 : t17

axiom to_uint_sub : forall v1:t17, v2:t17. (to_uint (sub v1 v2) = mod
  (infix_mn (to_uint v1) (to_uint v2)) two_power_size)

axiom to_uint_sub_bounded : forall v1:t17, v2:t17. infix_lseq 0 (infix_mn
  (to_uint v1) (to_uint v2)) /\ infix_ls (infix_mn (to_uint v1) (to_uint v2))
  two_power_size -> (to_uint (sub v1 v2) = infix_mn (to_uint v1) (to_uint
  v2))

function neg t17 : t17

axiom to_uint_neg : forall v:t17. (to_uint (neg v) = mod (prefix_mn (to_uint
  v)) two_power_size)

function mul t17 t17 : t17

axiom to_uint_mul : forall v1:t17, v2:t17. (to_uint (mul v1 v2) = mod
  (infix_as (to_uint v1) (to_uint v2)) two_power_size)

axiom to_uint_mul_bounded : forall v1:t17, v2:t17. infix_ls (infix_as
  (to_uint v1) (to_uint v2)) two_power_size -> (to_uint (mul v1
  v2) = infix_as (to_uint v1) (to_uint v2))

function udiv t17 t17 : t17

axiom to_uint_udiv : forall v1:t17, v2:t17. (to_uint (udiv v1 v2) = div
  (to_uint v1) (to_uint v2))

function urem t17 t17 : t17

axiom to_uint_urem : forall v1:t17, v2:t17. (to_uint (urem v1 v2) = mod
  (to_uint v1) (to_uint v2))

function lsr_bv t17 t17 : t17

axiom lsr_bv_is_lsr : forall x:t17, n:t17. (lsr_bv x n = lsr x (to_uint n))

axiom to_uint_lsr : forall v:t17, n:t17. (to_uint (lsr_bv v n) = div (to_uint
  v) (pow2 (to_uint n)))

function asr_bv t17 t17 : t17

axiom asr_bv_is_asr : forall x:t17, n:t17. (asr_bv x n = asr x (to_uint n))

function lsl_bv t17 t17 : t17

axiom lsl_bv_is_lsl : forall x:t17, n:t17. (lsl_bv x n = lsl x (to_uint n))

axiom to_uint_lsl : forall v:t17, n:t17. (to_uint (lsl_bv v n) = mod
  (infix_as (to_uint v) (pow2 (to_uint n))) two_power_size)

function rotate_right_bv t17 t17 : t17

function rotate_left_bv t17 t17 : t17

axiom rotate_left_bv_is_rotate_left : forall v:t17, n:t17. (rotate_left_bv v
  n = rotate_left v (to_uint n))

axiom rotate_right_bv_is_rotate_right : forall v:t17, n:t17. (rotate_right_bv
  v n = rotate_right v (to_uint n))

function nth_bv t17 t17 : bool

axiom nth_bv_def : forall x:t17, i:t17. (nth_bv x i = True) <-> not (bw_and
  (lsr_bv x i) (of_int 1) = zeros)

axiom Nth_bv_is_nth : forall x:t17, i:t17. (nth x (to_uint i) = nth_bv x i)

axiom Nth_bv_is_nth2 : forall x:t17, i:int. infix_lseq 0 i /\ infix_ls i
  two_power_size -> (nth_bv x (of_int i) = nth x i)

predicate eq_sub_bv t17 t17 t17 t17

axiom eq_sub_bv_def : forall a:t17, b:t17, i:t17, n:t17.
  let mask = lsl_bv (sub (lsl_bv (of_int 1) n) (of_int 1)) i in eq_sub_bv a b
  i n <-> (bw_and b mask = bw_and a mask)

predicate eq_sub (a:t17) (b:t17) (i:int) (n:int) = forall j:int. infix_lseq i
  j /\ infix_ls j (infix_pl i n) -> (nth a j = nth b j)

axiom eq_sub_equiv : forall a:t17, b:t17, i:t17, n:t17. eq_sub a b (to_uint
  i) (to_uint n) <-> eq_sub_bv a b i n

predicate eq (v1:t17) (v2:t17) = eq_sub v1 v2 0 size

axiom Extensionality : forall x:t17, y:t17 [eq x y]. eq x y -> (x = y)

(* clone bv.BV_Gen with type t18 = t17, predicate eq1 = eq,
  predicate eq_sub1 = eq_sub, predicate eq_sub_bv1 = eq_sub_bv,
  function nth_bv1 = nth_bv, function rotate_left_bv1 = rotate_left_bv,
  function rotate_right_bv1 = rotate_right_bv, function lsl_bv1 = lsl_bv,
  function asr_bv1 = asr_bv, function lsr_bv1 = lsr_bv,
  function urem1 = urem, function udiv1 = udiv, function mul1 = mul,
  function neg1 = neg, function sub1 = sub, function add1 = add,
  predicate sge1 = sge, predicate sgt1 = sgt, predicate sle1 = sle,
  predicate slt1 = slt, predicate uge1 = uge, predicate ugt1 = ugt,
  predicate ule1 = ule, predicate ult1 = ult, function size_bv1 = size_bv,
  predicate uint_in_range1 = uint_in_range, function of_int1 = of_int,
  function to_uint1 = to_uint, function to_int1 = to_int,
  function max_int1 = max_int, function two_power_size1 = two_power_size,
  function rotate_left1 = rotate_left, function rotate_right1 = rotate_right,
  function lsl1 = lsl, function asr1 = asr, function lsr1 = lsr,
  function bw_not1 = bw_not, function bw_xor1 = bw_xor,
  function bw_or1 = bw_or, function bw_and1 = bw_and, function ones1 = ones,
  function zeros1 = zeros, function nth1 = nth, function size1 = size,
  prop Extensionality1 = Extensionality, prop eq_sub_equiv1 = eq_sub_equiv,
  prop eq_sub_bv_def1 = eq_sub_bv_def, prop Nth_bv_is_nth21 = Nth_bv_is_nth2,
  prop Nth_bv_is_nth1 = Nth_bv_is_nth, prop nth_bv_def1 = nth_bv_def,
  prop rotate_right_bv_is_rotate_right1 = rotate_right_bv_is_rotate_right,
  prop rotate_left_bv_is_rotate_left1 = rotate_left_bv_is_rotate_left,
  prop to_uint_lsl1 = to_uint_lsl, prop lsl_bv_is_lsl1 = lsl_bv_is_lsl,
  prop asr_bv_is_asr1 = asr_bv_is_asr, prop to_uint_lsr1 = to_uint_lsr,
  prop lsr_bv_is_lsr1 = lsr_bv_is_lsr, prop to_uint_urem1 = to_uint_urem,
  prop to_uint_udiv1 = to_uint_udiv,
  prop to_uint_mul_bounded1 = to_uint_mul_bounded,
  prop to_uint_mul1 = to_uint_mul, prop to_uint_neg1 = to_uint_neg,
  prop to_uint_sub_bounded1 = to_uint_sub_bounded,
  prop to_uint_sub1 = to_uint_sub,
  prop to_uint_add_bounded1 = to_uint_add_bounded,
  prop to_uint_add1 = to_uint_add, prop Of_int_ones1 = Of_int_ones,
  prop Of_int_zeros1 = Of_int_zeros, prop to_uint_of_int1 = to_uint_of_int,
  prop to_uint_bounds1 = to_uint_bounds,
  prop to_int_extensionality1 = to_int_extensionality,
  prop to_uint_extensionality1 = to_uint_extensionality,
  prop max_int_val = max_int_val1,
  prop two_power_size_val = two_power_size_val1,
  prop Nth_rotate_left1 = Nth_rotate_left,
  prop Nth_rotate_right1 = Nth_rotate_right, prop lsl_zeros1 = lsl_zeros,
  prop Lsl_nth_low1 = Lsl_nth_low, prop Lsl_nth_high1 = Lsl_nth_high,
  prop asr_zeros1 = asr_zeros, prop Asr_nth_high1 = Asr_nth_high,
  prop Asr_nth_low1 = Asr_nth_low, prop lsr_zeros1 = lsr_zeros,
  prop Lsr_nth_high1 = Lsr_nth_high, prop Lsr_nth_low1 = Lsr_nth_low,
  prop Nth_bw_not1 = Nth_bw_not, prop Nth_bw_xor1 = Nth_bw_xor,
  prop Nth_bw_or1 = Nth_bw_or, prop Nth_bw_and1 = Nth_bw_and,
  prop Nth_ones1 = Nth_ones, prop Nth_zeros1 = Nth_zeros,
  prop nth_out_of_bound1 = nth_out_of_bound, prop size_pos = size_pos1 *)

(* use bv.BV64 *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_rightmost_position_set
  "expl:VC for rightmost_position_set" : forall a:t17.
  ("stop_split" not (a = zeros)) -> (forall i:t17. ("stop_split" eq_sub_bv a
  zeros zeros i) -> ult i (of_int 64) -> not not (nth_bv a i = True) ->
  ("expl:postcondition" ult i (of_int 64)))

end
