theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

function abs (x:int) : int = if infix_gteq x 0 then x else prefix_mn x

axiom Abs_le : forall x:int, y:int. infix_lseq (abs x) y <-> infix_lseq
  (prefix_mn y) x /\ infix_lseq x y

axiom Abs_pos : forall x:int. infix_gteq (abs x) 0

(* use int.Abs *)

function div int int : int

function mod int int : int

axiom Div_mod : forall x:int, y:int. not (y = 0) -> (x = infix_pl (infix_as y
  (div x y)) (mod x y))

axiom Mod_bound : forall x:int, y:int. not (y = 0) -> infix_lseq 0 (mod x
  y) /\ infix_ls (mod x y) (abs y)

axiom Div_unique : forall x:int, y:int, q:int. infix_gt y 0 -> infix_lseq
  (infix_as q y) x /\ infix_ls x (infix_pl (infix_as q y) y) -> (div x y = q)

axiom Div_bound : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_lseq 0 (div x y) /\ infix_lseq (div x y) x

axiom Mod_1 : forall x:int. (mod x 1 = 0)

axiom Div_1 : forall x:int. (div x 1 = x)

axiom Div_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (div x
  y = 0)

axiom Div_inf_neg : forall x:int, y:int. infix_ls 0 x /\ infix_lseq x y ->
  (div (prefix_mn x) y = prefix_mn 1)

axiom Mod_0 : forall y:int. not (y = 0) -> (mod 0 y = 0)

axiom Div_1_left : forall y:int. infix_gt y 1 -> (div 1 y = 0)

axiom Div_minus1_left : forall y:int. infix_gt y 1 -> (div (prefix_mn 1)
  y = prefix_mn 1)

axiom Mod_1_left : forall y:int. infix_gt y 1 -> (mod 1 y = 1)

axiom Mod_minus1_left : forall y:int. infix_gt y 1 -> (mod (prefix_mn 1)
  y = infix_mn y 1)

axiom Div_mult : forall x:int, y:int, z:int [div (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 -> (div (infix_pl (infix_as x y) z) x = infix_pl y (div z
  x))

axiom Mod_mult : forall x:int, y:int, z:int [mod (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 -> (mod (infix_pl (infix_as x y) z) x = mod z x)

(* use int.EuclideanDivision *)

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc14 *)

(* clone algebra.Monoid with type t1 = int, function unit = one,
  function op1 = infix_as, prop Unit_def_r1 = Unit_def_r8,
  prop Unit_def_l1 = Unit_def_l8, prop Assoc2 = Assoc14 *)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm11 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeMonoid with type t17 = int, function unit3 = one,
  function op5 = infix_as, prop Comm12 = Comm11,
  prop Unit_def_r9 = Unit_def_r8, prop Unit_def_l9 = Unit_def_l8,
  prop Assoc15 = Assoc14 *)

function power int int : int

axiom Power_0 : forall x:int. (power x 0 = one)

axiom Power_s : forall x:int, n:int. infix_gteq n 0 -> (power x (infix_pl n
  1) = infix_as x (power x n))

axiom Power_s_alt : forall x:int, n:int. infix_gt n 0 -> (power x
  n = infix_as x (power x (infix_mn n 1)))

axiom Power_1 : forall x:int. (power x 1 = x)

axiom Power_sum : forall x:int, n:int, m:int. infix_lseq 0 n -> infix_lseq 0
  m -> (power x (infix_pl n m) = infix_as (power x n) (power x m))

axiom Power_mult : forall x:int, n:int, m:int. infix_lseq 0 n -> infix_lseq 0
  m -> (power x (infix_as n m) = power (power x n) m)

axiom Power_mult2 : forall x:int, y:int, n:int. infix_lseq 0 n -> (power
  (infix_as x y) n = infix_as (power x n) (power y n))

(* clone int.Exponentiation with type t18 = int, function power1 = power,
  function infix_as5 = infix_as, function one3 = one,
  prop Power_mult21 = Power_mult2, prop Power_mult1 = Power_mult,
  prop Power_sum1 = Power_sum, prop Power_11 = Power_1,
  prop Power_s_alt1 = Power_s_alt, prop Power_s1 = Power_s,
  prop Power_01 = Power_0, prop Comm13 = Comm11,
  prop Unit_def_r10 = Unit_def_r8, prop Unit_def_l10 = Unit_def_l8,
  prop Assoc16 = Assoc14 *)

axiom Power_non_neg : forall x:int, y:int. infix_gteq x 0 /\ infix_gteq y
  0 -> infix_gteq (power x y) 0

axiom Power_monotonic : forall x:int, n:int, m:int. infix_ls 0 x /\
  infix_lseq 0 n /\ infix_lseq n m -> infix_lseq (power x n) (power x m)

(* use int.Power *)

type func 'a 'b

type pred 'a = func 'a bool

function infix_at (func 'a 'b) 'a : 'b

(* use why3.HighOrd.HighOrd *)

function numof (func int bool) int int : int

axiom Numof_empty : forall p:func int bool, a:int, b:int. infix_lseq b a ->
  (numof p a b = 0)

axiom Numof_right_no_add : forall p:func int bool, a:int, b:int. infix_ls a
  b -> not (infix_at p (infix_mn b 1) = True) -> (numof p a b = numof p a
  (infix_mn b 1))

axiom Numof_right_add : forall p:func int bool, a:int, b:int. infix_ls a b ->
  (infix_at p (infix_mn b 1) = True) -> (numof p a b = infix_pl 1 (numof p a
  (infix_mn b 1)))

axiom Numof_bounds : forall p:func int bool, a:int, b:int. infix_ls a b ->
  infix_lseq 0 (numof p a b) /\ infix_lseq (numof p a b) (infix_mn b a)

axiom Numof_append : forall p:func int bool, a:int, b:int, c:int. infix_lseq
  a b /\ infix_lseq b c -> (numof p a c = infix_pl (numof p a b) (numof p b
  c))

axiom Numof_left_no_add : forall p:func int bool, a:int, b:int. infix_ls a
  b -> not (infix_at p a = True) -> (numof p a b = numof p (infix_pl a 1) b)

axiom Numof_left_add : forall p:func int bool, a:int, b:int. infix_ls a b ->
  (infix_at p a = True) -> (numof p a b = infix_pl 1 (numof p (infix_pl a 1)
  b))

axiom Empty : forall p:func int bool, a:int, b:int. (forall n:int. infix_lseq
  a n /\ infix_ls n b -> not (infix_at p n = True)) -> (numof p a b = 0)

axiom Full : forall p:func int bool, a:int, b:int. infix_lseq a b ->
  (forall n:int. infix_lseq a n /\ infix_ls n b -> (infix_at p n = True)) ->
  (numof p a b = infix_mn b a)

axiom numof_increasing : forall p:func int bool, i:int, j:int, k:int.
  infix_lseq i j /\ infix_lseq j k -> infix_lseq (numof p i j) (numof p i k)

axiom numof_strictly_increasing : forall p:func int bool, i:int, j:int, k:
  int, l:int. infix_lseq i j /\ infix_lseq j k /\ infix_ls k l -> (infix_at p
  k = True) -> infix_ls (numof p i j) (numof p i l)

axiom numof_change_any : forall p1:func int bool, p2:func int bool, a:int, b:
  int. (forall j:int. infix_lseq a j /\ infix_ls j b -> (infix_at p1
  j = True) -> (infix_at p2 j = True)) -> infix_gteq (numof p2 a b) (numof p1
  a b)

axiom numof_change_some : forall p1:func int bool, p2:func int bool, a:int,
  b:int, i:int. infix_lseq a i /\ infix_ls i b -> (forall j:int. infix_lseq a
  j /\ infix_ls j b -> (infix_at p1 j = True) -> (infix_at p2 j = True)) ->
  not (infix_at p1 i = True) -> (infix_at p2 i = True) -> infix_gt (numof p2
  a b) (numof p1 a b)

axiom numof_change_equiv : forall p1:func int bool, p2:func int bool, a:int,
  b:int. (forall j:int. infix_lseq a j /\ infix_ls j b -> (infix_at p1
  j = True) <-> (infix_at p2 j = True)) -> (numof p2 a b = numof p1 a b)

(* use int.NumOf *)

function sum_digits int : int

axiom Sum_digits_def : forall n:int. (sum_digits n = if infix_lseq n 0 then 0
  else infix_pl (sum_digits (div n 10)) (mod n 10))

predicate p (a:int) (b:int) (c:int) (n:int) = (infix_lseq 0 (mod n 10) /\
  infix_ls (mod n 10) c) /\ (sum_digits n = infix_pl (sum_digits (infix_pl
  (infix_as 137 n) a)) b)

function numof1 (a:int) (b:int) (c:int) (l:int) (u:int) : int = numof (\ n:
  int. p a b c n) l u

function solution (a:int) (b:int) (m:int) : int = numof1 a b 10 0 (power 10
  m)

function num_of_modc (a:int) (b:int) (c:int) (x:int) (y:int) : int = infix_mn
  (numof1 a b (infix_pl c 1) x y) (numof1 a b c x y)

axiom Base : forall a:int, b:int. infix_lseq 0 a -> (infix_pl (sum_digits a)
  b = 0) -> p a b 10 0

axiom Empty1 : forall a:int, b:int, x:int, y:int. (numof1 a b 0 x y = 0)

axiom Induc : forall a:int, b:int, c:int, m:int. infix_lseq 0 a -> infix_lseq
  0 c /\ infix_ls c 10 -> infix_gt m 0 ->
  (let x = infix_pl (infix_as 137 c) a in let aqt = div x 10 in
  let bqt = infix_mn (infix_pl (mod x 10) b) c in (solution aqt bqt (infix_mn
  m 1) = num_of_modc a b c 0 (power 10 m)))

function div1 int int : int

function mod1 int int : int

axiom Div_mod1 : forall x:int, y:int. not (y = 0) -> (x = infix_pl (infix_as
  y (div1 x y)) (mod1 x y))

axiom Div_bound1 : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_lseq 0 (div1 x y) /\ infix_lseq (div1 x y) x

axiom Mod_bound1 : forall x:int, y:int. not (y = 0) -> infix_ls (prefix_mn
  (abs y)) (mod1 x y) /\ infix_ls (mod1 x y) (abs y)

axiom Div_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_gteq (div1 x y) 0

axiom Div_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ infix_gt y 0 ->
  infix_lseq (div1 x y) 0

axiom Mod_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ not (y = 0) ->
  infix_gteq (mod1 x y) 0

axiom Mod_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ not (y = 0) ->
  infix_lseq (mod1 x y) 0

axiom Rounds_toward_zero : forall x:int, y:int. not (y = 0) -> infix_lseq
  (abs (infix_as (div1 x y) y)) (abs x)

axiom Div_11 : forall x:int. (div1 x 1 = x)

axiom Mod_11 : forall x:int. (mod1 x 1 = 0)

axiom Div_inf1 : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (div1
  x y = 0)

axiom Mod_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (mod1
  x y = x)

axiom Div_mult1 : forall x:int, y:int, z:int [div1 (infix_pl (infix_as x y)
  z) x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (div1 (infix_pl
  (infix_as x y) z) x = infix_pl y (div1 z x))

axiom Mod_mult1 : forall x:int, y:int, z:int [mod1 (infix_pl (infix_as x y)
  z) x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (mod1 (infix_pl
  (infix_as x y) z) x = mod1 z x)

(* use int.ComputerDivision *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_f "expl:VC for f" : forall m:int, a:int, b:int.
  ("stop_split" infix_lseq 0 m /\ infix_lseq 0 a) -> not (m = 0) ->
  (let p1 = power 10 m in infix_lseq 0 9 -> (forall sum:int. forall c:int.
  infix_lseq 0 c /\ infix_lseq c 9 -> ("stop_split" (sum = numof1 a b c 0
  p1)) -> (let x = infix_pl (infix_as 137 c) a in let q = div1 x 10 in
  let r = mod1 x 10 in let o = infix_mn m 1 in "asym_split"
  "expl:precondition" infix_lseq 0 o /\ infix_lseq 0 q)))

end
