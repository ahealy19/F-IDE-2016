theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type dll =
  | Mk_dll (prev:array int) (next:array int) (n:int)

predicate valid_in (l:dll) (i:int) = (infix_lseq 0 i /\ infix_ls i (n l)) /\
  (infix_lseq 0 (mixfix_lbrb1 (prev l) i) /\ infix_ls (mixfix_lbrb1 (prev l)
  i) (n l)) /\ (infix_lseq 0 (mixfix_lbrb1 (next l) i) /\ infix_ls
  (mixfix_lbrb1 (next l) i) (n l)) /\ (mixfix_lbrb1 (next l) (mixfix_lbrb1
  (prev l) i) = i) /\ (mixfix_lbrb1 (prev l) (mixfix_lbrb1 (next l) i) = i)

predicate valid_out (l:dll) (i:int) = (infix_lseq 0 i /\ infix_ls i (n l)) /\
  (infix_lseq 0 (mixfix_lbrb1 (prev l) i) /\ infix_ls (mixfix_lbrb1 (prev l)
  i) (n l)) /\ (infix_lseq 0 (mixfix_lbrb1 (next l) i) /\ infix_ls
  (mixfix_lbrb1 (next l) i) (n l)) /\ (mixfix_lbrb1 (next l) (mixfix_lbrb1
  (prev l) i) = mixfix_lbrb1 (next l) i) /\ (mixfix_lbrb1 (prev l)
  (mixfix_lbrb1 (next l) i) = mixfix_lbrb1 (prev l) i)

type seq 'a

(* meta infinite_type type seq *)

function length1 (seq 'a) : int

axiom length_nonnegative : forall s:seq 'a. infix_lseq 0 (length1 s)

function empty : seq 'a

axiom empty_length : (length1 (empty:seq 'a) = 0)

function get2 (seq 'a) int : 'a

function mixfix_lbrb2 (s:seq 'a) (i:int) : 'a = get2 s i

function set2 (seq 'a) int 'a : seq 'a

axiom set_def1 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length1 s) -> (length1 (set2 s i v) = length1 s)

axiom set_def2 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length1 s) -> (get2 (set2 s i v) i = v)

axiom set_def3 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length1 s) -> (forall j:int. infix_lseq 0 j /\ infix_ls j (length1 s) ->
  not (j = i) -> (get2 (set2 s i v) j = get2 s j))

function mixfix_lblsmnrb2 (s:seq 'a) (i:int) (v:'a) : seq 'a = set2 s i v

predicate infix_eqeq (s1:seq 'a) (s2:seq 'a) = ("asym_split" (length1
  s1 = length1 s2)) && (forall i:int. infix_lseq 0 i /\ infix_ls i (length1
  s1) -> (mixfix_lbrb2 s1 i = mixfix_lbrb2 s2 i))

axiom extensionality : forall s1:seq 'a, s2:seq 'a. infix_eqeq s1 s2 ->
  (s1 = s2)

function cons 'a (seq 'a) : seq 'a

axiom cons_length : forall x:'a, s:seq 'a. (length1 (cons x s) = infix_pl 1
  (length1 s))

axiom cons_get : forall x:'a, s:seq 'a, i:int. infix_lseq 0 i /\ infix_lseq i
  (length1 s) -> (mixfix_lbrb2 (cons x s) i = if (i = 0) then x
  else mixfix_lbrb2 s (infix_mn i 1))

function snoc (seq 'a) 'a : seq 'a

axiom snoc_length : forall s:seq 'a, x:'a. (length1 (snoc s x) = infix_pl 1
  (length1 s))

axiom snoc_get : forall s:seq 'a, x:'a, i:int. infix_lseq 0 i /\ infix_lseq i
  (length1 s) -> (mixfix_lbrb2 (snoc s x)
  i = if infix_ls i (length1 s) then mixfix_lbrb2 s i else x)

axiom snoc_last : forall s:seq 'a, x:'a. (mixfix_lbrb2 (snoc s x) (length1
  s) = x)

function mixfix_lb_dtdt_rb (seq 'a) int int : seq 'a

axiom sub_length : forall s:seq 'a, i:int, j:int. infix_lseq 0 i /\
  infix_lseq i j /\ infix_lseq j (length1 s) -> (length1 (mixfix_lb_dtdt_rb s
  i j) = infix_mn j i)

axiom sub_get : forall s:seq 'a, i:int, j:int. infix_lseq 0 i /\ infix_lseq i
  j /\ infix_lseq j (length1 s) -> (forall k:int. infix_lseq 0 k /\ infix_ls
  k (infix_mn j i) -> (mixfix_lbrb2 (mixfix_lb_dtdt_rb s i j)
  k = mixfix_lbrb2 s (infix_pl i k)))

function mixfix_lb_dtdtrb (s:seq 'a) (i:int) : seq 'a = mixfix_lb_dtdt_rb s i
  (length1 s)

function mixfix_lbdtdt_rb (s:seq 'a) (j:int) : seq 'a = mixfix_lb_dtdt_rb s 0
  j

function infix_plpl (seq 'a) (seq 'a) : seq 'a

axiom concat_length : forall s1:seq 'a, s2:seq 'a. (length1 (infix_plpl s1
  s2) = infix_pl (length1 s1) (length1 s2))

axiom concat_get1 : forall s1:seq 'a, s2:seq 'a, i:int. infix_lseq 0 i /\
  infix_ls i (length1 s1) -> (mixfix_lbrb2 (infix_plpl s1 s2)
  i = mixfix_lbrb2 s1 i)

axiom concat_get2 : forall s1:seq 'a, s2:seq 'a, i:int. infix_lseq (length1
  s1) i /\ infix_ls i (infix_pl (length1 s1) (length1 s2)) -> (mixfix_lbrb2
  (infix_plpl s1 s2) i = mixfix_lbrb2 s2 (infix_mn i (length1 s1)))

type func 'a 'b

type pred 'a = func 'a bool

function infix_at (func 'a 'b) 'a : 'b

(* use why3.HighOrd.HighOrd *)

function create int (func int 'a) : seq 'a

axiom create_length : forall len:int, f:func int 'a. infix_lseq 0 len ->
  (length1 (create len f) = len)

axiom create_get : forall len:int, f:func int 'a, i:int. infix_lseq 0 i /\
  infix_ls i len -> (mixfix_lbrb2 (create len f) i = infix_at f i)

(* use seq.Seq *)

function nth (s:seq 'a) (i:int) : 'a = mixfix_lbrb2 s i

predicate is_list (l:dll) (s:seq int) = forall k:int. infix_lseq 0 k /\
  infix_ls k (length1 s) -> (infix_lseq 0 (nth s k) /\ infix_ls (nth s k) (n
  l)) /\ (mixfix_lbrb1 (prev l) (nth s k) = nth s (if (k = 0) then infix_mn
  (length1 s) 1 else infix_mn k 1)) /\ (mixfix_lbrb1 (next l) (nth s k) = nth
  s (if (k = infix_mn (length1 s) 1) then 0 else infix_pl k 1)) /\
  (forall kqt:int. infix_lseq 0 kqt /\ infix_ls kqt (length1 s) ->
  not (k = kqt) -> not (nth s k = nth s kqt))

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_put_back "expl:VC for put_back" : forall l:int, l1:map int
  int, l2:int, l3:map int int, l4:int, i:int, s:seq int.
  let l5 = Mk_dll (Mk_array l l1) (Mk_array l2 l3) l4 in
  ("asym_split" ("stop_split" "expl:type invariant" (l = l2) /\ (l2 = l4)) /\
  ("stop_split" "expl:type invariant" infix_lseq 0 l) /\ ("stop_split"
  "expl:type invariant" infix_lseq 0 l2)) && ("stop_split" valid_out l5 i) /\
  ("stop_split" is_list l5 s) /\ ("stop_split" infix_ls 0 (length1 s)) /\
  ("stop_split" (get l3 i = nth s 0) /\ not (nth s 0 = i)) -> ("asym_split"
  "stop_split" "expl:index in array bounds" infix_lseq 0 i /\ infix_ls i
  l2) -> (let o = get l3 i in ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 o /\ infix_ls o l) -> (forall o1:
  map int int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0
  l) && ("stop_split" (o1 = set l1 o i)) -> ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 l) ->
  ("expl:index in array bounds" infix_lseq 0 i /\ infix_ls i l)))

end
