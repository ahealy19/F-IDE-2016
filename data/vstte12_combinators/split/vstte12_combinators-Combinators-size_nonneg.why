theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

type term =
  | S
  | K
  | App term term

predicate is_value (t:term) =
  match t with
  | K | S -> true
  | App K v | App S v -> is_value v
  | App (App S v1) v2 -> is_value v1 /\ is_value v2
  | _ -> false
  end

type context =
  | Hole
  | Left context term
  | Right term context

predicate is_context (c:context) =
  match c with
  | Hole -> true
  | Left c1 _ -> is_context c1
  | Right v c1 -> ("asym_split" is_value v) && is_context c1
  end

function subst (c:context) (t:term) : term =
  match c with
  | Hole -> t
  | Left c1 t2 -> App (subst c1 t) t2
  | Right v1 c2 -> App v1 (subst c2 t)
  end

inductive infix_mnmngt term term =
  | red_K : forall c:context. is_context c -> (forall v1:term, v2:term.
      is_value v1 -> is_value v2 -> infix_mnmngt (subst c (App (App K v1)
      v2)) (subst c v1))
  | red_S : forall c:context. is_context c -> (forall v1:term, v2:term, v3:
      term. is_value v1 -> is_value v2 -> is_value v3 -> infix_mnmngt (subst
      c (App (App (App S v1) v2) v3)) (subst c (App (App v1 v3) (App v2
      v3))))

axiom red_left : forall t1:term, t2:term, t:term. infix_mnmngt t1 t2 ->
  infix_mnmngt (App t1 t) (App t2 t)

axiom red_right : forall v:term, t1:term, t2:term. is_value v -> infix_mnmngt
  t1 t2 -> infix_mnmngt (App v t1) (App v t2)

(* clone relations.EndoRelation with type t = term,
  predicate rel = infix_mnmngt,  *)

inductive relTR term term =
  | BaseTransRefl : forall x:term. relTR x x
  | StepTransRefl : forall x:term, y:term, z:term. relTR x y -> infix_mnmngt
      y z -> relTR x z

axiom relTR_transitive : forall x:term, y:term, z:term. relTR x y -> relTR y
  z -> relTR x z

(* clone relations.ReflTransClosure with type t1 = term,
  predicate relTR1 = relTR, predicate rel1 = infix_mnmngt,
  prop relTR_transitive1 = relTR_transitive,
  prop StepTransRefl1 = StepTransRefl, prop BaseTransRefl1 = BaseTransRefl *)

predicate infix_mnmngtas (t1:term) (t2:term) = relTR t1 t2

axiom red_star_left : forall t1:term, t2:term, t:term. infix_mnmngtas t1
  t2 -> infix_mnmngtas (App t1 t) (App t2 t)

axiom red_star_right : forall v:term, t1:term, t2:term. is_value v ->
  infix_mnmngtas t1 t2 -> infix_mnmngtas (App v t1) (App v t2)

function i : term = App (App S K) K

type tuple2 'a 'a1 =
  | Tuple2 'a 'a1

(* use why3.Tuple2.Tuple21 *)

axiom reducible_or_value : forall t:term. (exists tqt:term. infix_mnmngt t
  tqt) \/ is_value t

predicate irreducible (t:term) = forall tqt:term. not infix_mnmngt t tqt

axiom irreducible_is_value : forall t:term. irreducible t <-> is_value t

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t2 = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t3 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t4 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t5 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t6 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t2 = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t7 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t5 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t8 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t9 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t10 = int,
  predicate rel2 = infix_lseq, prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t11 = int,
  predicate rel3 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t12 = int, predicate rel4 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t14 = int,
  predicate rel6 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t15 = int, predicate rel7 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t16 = int,
  predicate rel8 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t17 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

inductive only_K term =
  | only_K_K : only_K K
  | only_K_App : forall t1:term, t2:term. only_K t1 -> only_K t2 -> only_K
      (App t1 t2)

axiom only_K_reduces : forall t:term. only_K t -> (exists v:term.
  infix_mnmngtas t v /\ is_value v /\ only_K v)

function size (t:term) : int =
  match t with
  | K | S -> 0
  | App t1 t2 -> infix_pl (infix_pl 1 (size t1)) (size t2)
  end

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal size_nonneg : forall t:term. infix_gteq (size t) 0

end
