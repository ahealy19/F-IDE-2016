theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

function abs (x:int) : int = if infix_gteq x 0 then x else prefix_mn x

axiom Abs_le : forall x:int, y:int. infix_lseq (abs x) y <-> infix_lseq
  (prefix_mn y) x /\ infix_lseq x y

axiom Abs_pos : forall x:int. infix_gteq (abs x) 0

(* use int.Abs *)

function div int int : int

function mod int int : int

axiom Div_mod : forall x:int, y:int. not (y = 0) -> (x = infix_pl (infix_as y
  (div x y)) (mod x y))

axiom Div_bound : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_lseq 0 (div x y) /\ infix_lseq (div x y) x

axiom Mod_bound : forall x:int, y:int. not (y = 0) -> infix_ls (prefix_mn
  (abs y)) (mod x y) /\ infix_ls (mod x y) (abs y)

axiom Div_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ infix_gt y 0 ->
  infix_gteq (div x y) 0

axiom Div_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ infix_gt y 0 ->
  infix_lseq (div x y) 0

axiom Mod_sign_pos : forall x:int, y:int. infix_gteq x 0 /\ not (y = 0) ->
  infix_gteq (mod x y) 0

axiom Mod_sign_neg : forall x:int, y:int. infix_lseq x 0 /\ not (y = 0) ->
  infix_lseq (mod x y) 0

axiom Rounds_toward_zero : forall x:int, y:int. not (y = 0) -> infix_lseq
  (abs (infix_as (div x y) y)) (abs x)

axiom Div_1 : forall x:int. (div x 1 = x)

axiom Mod_1 : forall x:int. (mod x 1 = 0)

axiom Div_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (div x
  y = 0)

axiom Mod_inf : forall x:int, y:int. infix_lseq 0 x /\ infix_ls x y -> (mod x
  y = x)

axiom Div_mult : forall x:int, y:int, z:int [div (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (div (infix_pl
  (infix_as x y) z) x = infix_pl y (div z x))

axiom Mod_mult : forall x:int, y:int, z:int [mod (infix_pl (infix_as x y) z)
  x]. infix_gt x 0 /\ infix_gteq y 0 /\ infix_gteq z 0 -> (mod (infix_pl
  (infix_as x y) z) x = mod z x)

(* use int.ComputerDivision *)

type option 'a =
  | None
  | Some 'a

(* use option.Option *)

type list 'a =
  | Nil
  | Cons 'a (list 'a)

(* use list.List *)

predicate mem (x:'a) (l:list 'a) =
  match l with
  | Nil -> false
  | Cons y r -> (x = y) \/ mem x r
  end

(* use list.Mem *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

function const 'b : map 'a 'b

axiom Const : forall b:'b, a:'a. (mixfix_lbrb (const b:map 'a 'b) a = b)

(* use map.Const *)

type array 'a =
  | Mk_array (length:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length a)
  (set (elts a) i v)

function mixfix_lbrb1 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type key

function hash key : int

axiom hash_nonneg : forall k:key. infix_lseq 0 (hash k)

function bucket (k:key) (n:int) : int = mod (hash k) n

axiom bucket_bounds : forall n:int. infix_ls 0 n -> (forall k:key. infix_lseq
  0 (bucket k n) /\ infix_ls (bucket k n) n)

type tuple2 'a 'a1 =
  | Tuple2 'a 'a1

(* use why3.Tuple2.Tuple21 *)

predicate in_data (k:key) (v:'a) (d:array (list (tuple2 key 'a))) = mem
  (Tuple2 k v) (mixfix_lbrb1 d (bucket k (length d)))

predicate good_data (k:key) (v:'a) (m:map key (option 'a)) (d:array (list
  (tuple2 key 'a))) = (get m k = Some v) <-> in_data k v d

predicate good_hash (d:array (list (tuple2 key 'a))) (i:int) = forall k:key,
  v:'a. mem (Tuple2 k v) (mixfix_lbrb1 d i) -> (bucket k (length d) = i)

type t17
  'a =
  | Mk_t (size:int) (data:array (list (tuple2 key 'a))) (view:map key (option
      'a))

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_resize "expl:VC for resize" : forall h:int, h1:map int
  (list (tuple2 key 'a)), h2:map key (option 'a). (("stop_split"
  "expl:type invariant" infix_ls 0 h) /\ ("stop_split"
  "expl:type invariant" forall i:int. infix_lseq 0 i /\ infix_ls i h ->
  good_hash (Mk_array h h1) i) /\ ("stop_split"
  "expl:type invariant" forall k:key, v:'a. good_data k v h2 (Mk_array h
  h1))) /\ ("stop_split" "expl:type invariant" infix_lseq 0 h) ->
  (let nsize = infix_pl (infix_as 2 h) 1 in ("asym_split" "stop_split"
  "expl:array creation size" infix_gteq nsize 0) -> (forall ndata:int,
  ndata1:map int (list (tuple2 key 'a)).
  let ndata2 = Mk_array ndata ndata1 in ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 ndata) &&
  ("stop_split" (ndata = nsize)) /\ ("stop_split" forall i:int. infix_lseq 0
  i /\ infix_ls i nsize -> (get ndata1 i = Nil:list (tuple2 key 'a))) ->
  (forall i:int, l:list (tuple2 key 'a). forall ndata3:map int (list (tuple2
  key 'a)), rho:int, rho1:map int (list (tuple2 key 'a)).
  let ndata4 = Mk_array ndata ndata3 in ("asym_split" ((("stop_split"
  "expl:type invariant" infix_ls 0 rho) /\ ("stop_split"
  "expl:type invariant" forall i1:int. infix_lseq 0 i1 /\ infix_ls i1 rho ->
  good_hash (Mk_array rho rho1) i1) /\ ("stop_split"
  "expl:type invariant" forall k:key, v:'a. good_data k v h2 (Mk_array rho
  rho1))) /\ ("stop_split" "expl:type invariant" infix_lseq 0 rho)) /\
  ("stop_split" "expl:type invariant" infix_lseq 0 ndata)) &&
  ("stop_split" forall k:key, v:'a. mem (Tuple2 k v) l -> (bucket k
  h = i)) /\ ("stop_split" forall j:int. infix_lseq 0 j /\ infix_ls j
  nsize -> good_hash ndata4 j) /\ ("stop_split" forall k:key, v:'a.
  if infix_lseq 0 (bucket k h) /\ infix_ls (bucket k h) i then good_data k v
  h2 ndata4 else if (bucket k h = i) then (get h2 k = Some v) <-> mem (Tuple2
  k v) l \/ in_data k v ndata4 else not in_data k v ndata4) -> (forall x:
  tuple2 key 'a, x1:list (tuple2 key 'a). (l = Cons x x1) -> (forall x2:key,
  x3:'a. (x = Tuple2 x2 x3) -> (let b = bucket x2 nsize in ("asym_split"
  "stop_split" "expl:index in array bounds" infix_lseq 0 b /\ infix_ls b
  ndata) -> ("asym_split" "stop_split"
  "expl:index in array bounds" infix_lseq 0 b /\ infix_ls b ndata) ->
  (forall ndata5:map int (list (tuple2 key 'a)).
  let ndata6 = Mk_array ndata ndata5 in ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 ndata) && ("stop_split" (ndata5 = set
  ndata3 b (Cons (Tuple2 x2 x3) (get ndata3 b)))) ->
  ("expl:variant decrease" match l with
  | Nil -> false
  | Cons _ f -> (f = x1)
  end))))))))

end
