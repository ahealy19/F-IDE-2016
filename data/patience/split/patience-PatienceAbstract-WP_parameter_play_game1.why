theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type card1 = int

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb m a2)

(* use map.Map *)

function const 'b : map 'a 'b

axiom Const : forall b:'b, a:'a. (mixfix_lbrb (const b:map 'a 'b) a = b)

(* use map.Const *)

type tuple2 'a 'a1 =
  | Tuple2 'a 'a1

(* use why3.Tuple2.Tuple21 *)

type state =
  | Mk_state (num_elts:int) (values:map int int) (num_stacks:int)
      (stack_sizes:map int int) (stacks:map int (map int int)) (positions:map
      int (tuple2 int int)) (preds:map int int)

predicate inv2 (s:state) = (infix_lseq 0 (num_stacks s) /\ infix_lseq
  (num_stacks s) (num_elts s)) /\ (infix_gt (num_elts s) 0 -> infix_gt
  (num_stacks s) 0) /\ (forall i:int. infix_lseq 0 i /\ infix_ls i
  (num_stacks s) -> infix_gteq (mixfix_lbrb (stack_sizes s) i) 1 /\
  (forall j:int. infix_lseq 0 j /\ infix_ls j (mixfix_lbrb (stack_sizes s)
  i) -> infix_lseq 0 (mixfix_lbrb (mixfix_lbrb (stacks s) i) j) /\ infix_ls
  (mixfix_lbrb (mixfix_lbrb (stacks s) i) j) (num_elts s))) /\ (forall i:int.
  infix_lseq 0 i /\ infix_ls i (num_elts s) ->
  match mixfix_lbrb (positions s) i with
  | Tuple2 is ip -> ("asym_split" infix_lseq 0 is /\ infix_ls is (num_stacks
      s)) && (let st = mixfix_lbrb (stacks s) is in ("asym_split" infix_lseq
      0 ip /\ infix_ls ip (mixfix_lbrb (stack_sizes s) is)) && (mixfix_lbrb
      st ip = i))
  end) /\ (forall is:int. infix_lseq 0 is /\ infix_ls is (num_stacks s) ->
  (forall ip:int. infix_lseq 0 ip /\ infix_ls ip (mixfix_lbrb (stack_sizes s)
  is) -> (let idx = mixfix_lbrb (mixfix_lbrb (stacks s) is) ip in (Tuple2 is
  ip = mixfix_lbrb (positions s) idx)))) /\ (forall i:int. infix_lseq 0 i /\
  infix_ls i (num_stacks s) -> (let stack_i = mixfix_lbrb (stacks s) i in
  forall j:int, k:int. infix_lseq 0 j /\ infix_ls j k /\ infix_ls k
  (mixfix_lbrb (stack_sizes s) i) -> infix_ls (mixfix_lbrb stack_i j)
  (mixfix_lbrb stack_i k))) /\ (forall i:int. infix_lseq 0 i /\ infix_ls i
  (num_stacks s) -> (let stack_i = mixfix_lbrb (stacks s) i in forall j:int,
  k:int. infix_lseq 0 j /\ infix_lseq j k /\ infix_ls k (mixfix_lbrb
  (stack_sizes s) i) -> infix_gteq (mixfix_lbrb (values s) (mixfix_lbrb
  stack_i j)) (mixfix_lbrb (values s) (mixfix_lbrb stack_i k)))) /\
  (forall i:int. infix_lseq 0 i /\ infix_ls i (num_elts s) ->
  (let pred = mixfix_lbrb (preds s) i in ("asym_split" infix_lseq (prefix_mn
  1) pred /\ infix_ls pred (num_elts s)) && infix_ls pred i /\
  match mixfix_lbrb (positions s) i with
  | Tuple2 is usip -> if infix_ls pred 0 then (is = 0) else infix_ls
      (mixfix_lbrb (values s) pred) (mixfix_lbrb (values s) i) /\
      ("asym_split" infix_gt is 0) &&
      match mixfix_lbrb (positions s) pred with
      | Tuple2 ps uspp -> (ps = infix_mn is 1)
      end
  end))

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

type list 'a =
  | Nil
  | Cons 'a (list 'a)

(* use list.List *)

function length (l:list 'a) : int =
  match l with
  | Nil -> 0
  | Cons _ r -> infix_pl 1 (length r)
  end

axiom Length_nonnegative : forall l:list 'a. infix_gteq (length l) 0

axiom Length_nil : forall l:list 'a. (length l = 0) <-> (l = Nil:list 'a)

(* use list.Length *)

function nth int (list 'a) : 'a

axiom nth_cons_0 : forall x:'a, r:list 'a. (nth 0 (Cons x r) = x)

axiom nth_cons_n : forall x:'a, r:list 'a, n:int. infix_gt n 0 -> (nth n
  (Cons x r) = nth (infix_mn n 1) r)

(* use list.NthNoOpt *)

type seq 'a =
  | Mk_seq (seqlen:int) (seqval:map int 'a)

predicate increasing_subsequence (s:seq int) (l:list int) =
  ("asym_split" infix_lseq 0 (seqlen s) /\ infix_lseq (seqlen s) (length
  l)) && ("asym_split" (forall i:int. infix_lseq 0 i /\ infix_ls i (seqlen
  s) -> infix_lseq 0 (mixfix_lbrb (seqval s) i) /\ infix_ls (mixfix_lbrb
  (seqval s) i) (length l)) /\ (forall i:int, j:int. infix_lseq 0 i /\
  infix_ls i j /\ infix_ls j (seqlen s) -> infix_ls (mixfix_lbrb (seqval s)
  i) (mixfix_lbrb (seqval s) j))) && (forall i:int, j:int. infix_lseq 0 i /\
  infix_ls i j /\ infix_ls j (seqlen s) -> infix_ls (nth (mixfix_lbrb (seqval
  s) i) l) (nth (mixfix_lbrb (seqval s) j) l))

type func 'a 'b

type pred 'a = func 'a bool

function infix_at (func 'a 'b) 'a : 'b

(* use why3.HighOrd.HighOrd *)

predicate range (f:func int int) (n:int) (m:int) = forall i:int. infix_lseq 0
  i /\ infix_ls i n -> infix_lseq 0 (infix_at f i) /\ infix_ls (infix_at f i)
  m

predicate injective (f:func int int) (n:int) (m:int) = forall i:int, j:int.
  infix_lseq 0 i /\ infix_ls i j /\ infix_ls j n -> not (infix_at f
  i = infix_at f j)

function shift (f:func int int) (i:int) : func int int = \ k:int.
  if infix_ls k i then infix_at f k else infix_at f (infix_pl k 1)

axiom pigeon_hole "why3:lemma" : forall n:int, m:int, f:func int int.
  ("stop_split" range f n m) /\ ("stop_split" infix_gt n m /\ infix_gteq m
  0) -> ("stop_split" not injective f n m)

(* use PigeonHole *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_play_game1 "expl:VC for play_game" : forall input:list int.
  ("asym_split" "stop_split" "expl:precondition" inv2 (Mk_state 0 (const
  (prefix_mn 1):map int int) 0 (const 0:map int int) (const (const (prefix_mn
  1):map int int):map int (map int int)) (const (Tuple2 (prefix_mn 1)
  (prefix_mn 1)):map int (tuple2 int int)) (const (prefix_mn 1):map int
  int))) -> (forall rho:map int int, rho1:map int (tuple2 int int), rho2:map
  int (map int int), rho3:map int int, rho4:int, rho5:map int int, rho6:int.
  ("stop_split" inv2 (Mk_state rho6 rho5 rho4 rho3 rho2 rho1 rho)) /\
  ("stop_split" (rho6 = infix_pl 0 (length input))) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i 0 -> (mixfix_lbrb
  rho5 i = mixfix_lbrb (const (prefix_mn 1):map int int) i)) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i rho6 ->
  (mixfix_lbrb rho5 i = nth (infix_mn i 0) input)) -> (rho4 = 0) ->
  ("asym_split" "expl:assertion" (input = Nil:list int)))

end
