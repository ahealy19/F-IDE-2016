theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : real = 0.0

function one : real = 1.0

predicate infix_ls real real

predicate infix_gt (x:real) (y:real) = infix_ls y x

predicate infix_lseq (x:real) (y:real) = infix_ls x y \/ (x = y)

function infix_pl real real : real

function prefix_mn real : real

function infix_as real real : real

axiom Assoc : forall x:real, y:real, z:real. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = real, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:real. (infix_pl zero x = x)

axiom Unit_def_r : forall x:real. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = real, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:real. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:real. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = real, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:real, y:real. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = real, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = real,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:real, y:real, z:real. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = real, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:real, y:real, z:real. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:real, y:real, z:real. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:real) (y:real) : real = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = real, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:real, y:real. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = real, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = real,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:real. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = real,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

function inv2 real : real

axiom Inverse : forall x:real. not (x = zero) -> (infix_as x (inv2 x) = one)

function infix_sl (x:real) (y:real) : real = infix_as x (inv2 y)

axiom add_div : forall x:real, y:real, z:real. not (z = zero) -> (infix_sl
  (infix_pl x y) z = infix_pl (infix_sl x z) (infix_sl y z))

axiom sub_div : forall x:real, y:real, z:real. not (z = zero) -> (infix_sl
  (infix_mn x y) z = infix_mn (infix_sl x z) (infix_sl y z))

axiom neg_div : forall x:real, y:real. not (y = zero) -> (infix_sl (prefix_mn
  x) y = prefix_mn (infix_sl x y))

axiom assoc_mul_div : forall x:real, y:real, z:real. not (z = zero) ->
  (infix_sl (infix_as x y) z = infix_as x (infix_sl y z))

axiom assoc_div_mul : forall x:real, y:real, z:real. not (y = zero) /\
  not (z = zero) -> (infix_sl (infix_sl x y) z = infix_sl x (infix_as y z))

axiom assoc_div_div : forall x:real, y:real, z:real. not (y = zero) /\
  not (z = zero) -> (infix_sl x (infix_sl y z) = infix_sl (infix_as x z) y)

(* clone algebra.Field with type t8 = real, function infix_sl1 = infix_sl,
  function inv3 = inv2, function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop assoc_div_div1 = assoc_div_div, prop assoc_div_mul1 = assoc_div_mul,
  prop assoc_mul_div1 = assoc_mul_div, prop neg_div1 = neg_div,
  prop sub_div1 = sub_div, prop add_div1 = add_div, prop Inverse1 = Inverse,
  prop NonTrivialRing2 = NonTrivialRing, prop Unitary2 = Unitary,
  prop Comm9 = Comm4, prop Mul_distr_r4 = Mul_distr_r,
  prop Mul_distr_l4 = Mul_distr_l, prop Assoc12 = Assoc5, prop Comm10 = Comm,
  prop Inv_def_r6 = Inv_def_r, prop Inv_def_l6 = Inv_def_l,
  prop Unit_def_r7 = Unit_def_r, prop Unit_def_l7 = Unit_def_l,
  prop Assoc13 = Assoc *)

predicate infix_gteq (x:real) (y:real) = infix_lseq y x

(* clone relations.EndoRelation with type t9 = real,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:real. infix_lseq x x

(* clone relations.Reflexive with type t10 = real,
  predicate rel1 = infix_lseq, prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t9 = real,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:real, y:real, z:real. infix_lseq x y -> infix_lseq y
  z -> infix_lseq x z

(* clone relations.Transitive with type t11 = real,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t12 = real,
  predicate rel3 = infix_lseq, prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t9 = real,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:real, y:real. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t13 = real,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t14 = real,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t9 = real,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:real, y:real. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t15 = real, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t16 = real,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:real, y:real, z:real. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:real, y:real, z:real. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedField with type t17 = real,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function infix_sl2 = infix_sl, function inv4 = inv2, function one3 = one,
  function infix_mn5 = infix_mn, function infix_as5 = infix_as,
  function prefix_mn5 = prefix_mn, function infix_pl5 = infix_pl,
  function zero5 = zero, prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop assoc_div_div2 = assoc_div_div,
  prop assoc_div_mul2 = assoc_div_mul, prop assoc_mul_div2 = assoc_mul_div,
  prop neg_div2 = neg_div, prop sub_div2 = sub_div, prop add_div2 = add_div,
  prop Inverse2 = Inverse, prop NonTrivialRing3 = NonTrivialRing,
  prop Unitary3 = Unitary, prop Comm11 = Comm4,
  prop Mul_distr_r5 = Mul_distr_r, prop Mul_distr_l5 = Mul_distr_l,
  prop Assoc14 = Assoc5, prop Comm12 = Comm, prop Inv_def_r7 = Inv_def_r,
  prop Inv_def_l7 = Inv_def_l, prop Unit_def_r8 = Unit_def_r,
  prop Unit_def_l8 = Unit_def_l, prop Assoc15 = Assoc *)

(* use real.Real *)

function infix_pldt (x:real) (y:real) : real = infix_pl x y

function infix_mndt (x:real) (y:real) : real = infix_mn x y

function infix_asdt (x:real) (y:real) : real = infix_as x y

function infix_sldt (x:real) (y:real) : real = infix_sl x y

function prefix_mndt (x:real) : real = prefix_mn x

function inv5 (x:real) : real = inv2 x

predicate infix_lseqdt (x:real) (y:real) = infix_lseq x y

predicate infix_gteqdt (x:real) (y:real) = infix_gteq x y

predicate infix_lsdt (x:real) (y:real) = infix_ls x y

predicate infix_gtdt (x:real) (y:real) = infix_gt x y

(* use real.RealInfix *)

function abs (x:real) : real = if infix_gteq x 0.0 then x else prefix_mn x

axiom Abs_le : forall x:real, y:real. infix_lseq (abs x) y <-> infix_lseq
  (prefix_mn y) x /\ infix_lseq x y

axiom Abs_pos : forall x:real. infix_gteq (abs x) 0.0

axiom Abs_sum : forall x:real, y:real. infix_lseq (abs (infix_pl x y))
  (infix_pl (abs x) (abs y))

axiom Abs_prod : forall x:real, y:real. (abs (infix_as x y) = infix_as (abs
  x) (abs y))

axiom triangular_inequality : forall x:real, y:real, z:real. infix_lseq (abs
  (infix_mn x z)) (infix_pl (abs (infix_mn x y)) (abs (infix_mn y z)))

(* use real.Abs *)

function sqr (x:real) : real = infix_as x x

function sqrt real : real

axiom Sqrt_positive : forall x:real. infix_gteq x 0.0 -> infix_gteq (sqrt x)
  0.0

axiom Sqrt_square : forall x:real. infix_gteq x 0.0 -> (sqr (sqrt x) = x)

axiom Square_sqrt : forall x:real. infix_gteq x 0.0 -> (sqrt (infix_as x
  x) = x)

axiom Sqrt_mul : forall x:real, y:real. infix_gteq x 0.0 /\ infix_gteq y
  0.0 -> (sqrt (infix_as x y) = infix_as (sqrt x) (sqrt y))

axiom Sqrt_le : forall x:real, y:real. infix_lseq 0.0 x /\ infix_lseq x y ->
  infix_lseq (sqrt x) (sqrt y)

(* use real.Square *)

function cos real : real

function sin real : real

axiom Pythagorean_identity : forall x:real. (infix_pl (sqr (cos x)) (sqr (sin
  x)) = 1.0)

axiom Cos_le_one : forall x:real. infix_lseq (abs (cos x)) 1.0

axiom Sin_le_one : forall x:real. infix_lseq (abs (sin x)) 1.0

axiom Cos_0 : (cos 0.0 = 1.0)

axiom Sin_0 : (sin 0.0 = 0.0)

function pi : real

axiom Pi_double_precision_bounds : infix_ls 0x1.921fb54442d18p1 pi /\
  infix_ls pi 0x1.921fb54442d19p1

axiom Cos_pi : (cos pi = prefix_mn 1.0)

axiom Sin_pi : (sin pi = 0.0)

axiom Cos_pi2 : (cos (infix_as 0.5 pi) = 0.0)

axiom Sin_pi2 : (sin (infix_as 0.5 pi) = 1.0)

axiom Cos_plus_pi : forall x:real. (cos (infix_pl x pi) = prefix_mn (cos x))

axiom Sin_plus_pi : forall x:real. (sin (infix_pl x pi) = prefix_mn (sin x))

axiom Cos_plus_pi2 : forall x:real. (cos (infix_pl x (infix_as 0.5
  pi)) = prefix_mn (sin x))

axiom Sin_plus_pi2 : forall x:real. (sin (infix_pl x (infix_as 0.5 pi)) = cos
  x)

axiom Cos_neg : forall x:real. (cos (prefix_mn x) = cos x)

axiom Sin_neg : forall x:real. (sin (prefix_mn x) = prefix_mn (sin x))

axiom Cos_sum : forall x:real, y:real. (cos (infix_pl x y) = infix_mn
  (infix_as (cos x) (cos y)) (infix_as (sin x) (sin y)))

axiom Sin_sum : forall x:real, y:real. (sin (infix_pl x y) = infix_pl
  (infix_as (sin x) (cos y)) (infix_as (cos x) (sin y)))

function tan (x:real) : real = infix_sl (sin x) (cos x)

function atan real : real

axiom Tan_atan : forall x:real. (tan (atan x) = x)

(* use real.Trigonometry *)

type mode =
  | NearestTiesToEven
  | ToZero
  | Up
  | Down
  | NearestTiesToAway

(* use floating_point.Rounding *)

type single

function max_single : real = 0x1.FFFFFEp127

function max_int : int = 16777216

(* use floating_point.SingleFormat *)

function zero6 : int = 0

function one4 : int = 1

predicate infix_ls1 int int

predicate infix_gt1 (x:int) (y:int) = infix_ls1 y x

predicate infix_lseq2 (x:int) (y:int) = infix_ls1 x y \/ (x = y)

function infix_pl6 int int : int

function prefix_mn6 int : int

function infix_as6 int int : int

axiom Assoc16 : forall x:int, y:int, z:int. (infix_pl6 (infix_pl6 x y)
  z = infix_pl6 x (infix_pl6 y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl6,
  prop Assoc1 = Assoc16 *)

axiom Unit_def_l9 : forall x:int. (infix_pl6 zero6 x = x)

axiom Unit_def_r9 : forall x:int. (infix_pl6 x zero6 = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero6,
  function op1 = infix_pl6, prop Unit_def_r1 = Unit_def_r9,
  prop Unit_def_l1 = Unit_def_l9, prop Assoc2 = Assoc16 *)

axiom Inv_def_l8 : forall x:int. (infix_pl6 (prefix_mn6 x) x = zero6)

axiom Inv_def_r8 : forall x:int. (infix_pl6 x (prefix_mn6 x) = zero6)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn6,
  function unit1 = zero6, function op2 = infix_pl6,
  prop Inv_def_r1 = Inv_def_r8, prop Inv_def_l1 = Inv_def_l8,
  prop Unit_def_r2 = Unit_def_r9, prop Unit_def_l2 = Unit_def_l9,
  prop Assoc3 = Assoc16 *)

axiom Comm13 : forall x:int, y:int. (infix_pl6 x y = infix_pl6 y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl6,
  prop Comm1 = Comm13 *)

(* meta AC function infix_pl6 *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn6, function unit2 = zero6,
  function op4 = infix_pl6, prop Comm2 = Comm13,
  prop Inv_def_r2 = Inv_def_r8, prop Inv_def_l2 = Inv_def_l8,
  prop Unit_def_r3 = Unit_def_r9, prop Unit_def_l3 = Unit_def_l9,
  prop Assoc4 = Assoc16 *)

axiom Assoc17 : forall x:int, y:int, z:int. (infix_as6 (infix_as6 x y)
  z = infix_as6 x (infix_as6 y z))

(* clone algebra.Assoc with type t = int, function op = infix_as6,
  prop Assoc1 = Assoc17 *)

axiom Mul_distr_l6 : forall x:int, y:int, z:int. (infix_as6 x (infix_pl6 y
  z) = infix_pl6 (infix_as6 x y) (infix_as6 x z))

axiom Mul_distr_r6 : forall x:int, y:int, z:int. (infix_as6 (infix_pl6 y z)
  x = infix_pl6 (infix_as6 y x) (infix_as6 z x))

function infix_mn6 (x:int) (y:int) : int = infix_pl6 x (prefix_mn6 y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn6,
  function infix_as1 = infix_as6, function prefix_mn1 = prefix_mn6,
  function infix_pl1 = infix_pl6, function zero1 = zero6,
  prop Mul_distr_r1 = Mul_distr_r6, prop Mul_distr_l1 = Mul_distr_l6,
  prop Assoc6 = Assoc17, prop Comm3 = Comm13, prop Inv_def_r3 = Inv_def_r8,
  prop Inv_def_l3 = Inv_def_l8, prop Unit_def_r4 = Unit_def_r9,
  prop Unit_def_l4 = Unit_def_l9, prop Assoc7 = Assoc16 *)

axiom Comm14 : forall x:int, y:int. (infix_as6 x y = infix_as6 y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as6,
  prop Comm1 = Comm14 *)

(* meta AC function infix_as6 *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn6, function infix_as2 = infix_as6,
  function prefix_mn2 = prefix_mn6, function infix_pl2 = infix_pl6,
  function zero2 = zero6, prop Comm5 = Comm14,
  prop Mul_distr_r2 = Mul_distr_r6, prop Mul_distr_l2 = Mul_distr_l6,
  prop Assoc8 = Assoc17, prop Comm6 = Comm13, prop Inv_def_r4 = Inv_def_r8,
  prop Inv_def_l4 = Inv_def_l8, prop Unit_def_r5 = Unit_def_r9,
  prop Unit_def_l5 = Unit_def_l9, prop Assoc9 = Assoc16 *)

axiom Unitary4 : forall x:int. (infix_as6 one4 x = x)

axiom NonTrivialRing4 : not (zero6 = one4)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one4, function infix_mn3 = infix_mn6,
  function infix_as3 = infix_as6, function prefix_mn3 = prefix_mn6,
  function infix_pl3 = infix_pl6, function zero3 = zero6,
  prop NonTrivialRing1 = NonTrivialRing4, prop Unitary1 = Unitary4,
  prop Comm7 = Comm14, prop Mul_distr_r3 = Mul_distr_r6,
  prop Mul_distr_l3 = Mul_distr_l6, prop Assoc10 = Assoc17,
  prop Comm8 = Comm13, prop Inv_def_r5 = Inv_def_r8,
  prop Inv_def_l5 = Inv_def_l8, prop Unit_def_r6 = Unit_def_r9,
  prop Unit_def_l6 = Unit_def_l9, prop Assoc11 = Assoc16 *)

predicate infix_gteq2 (x:int) (y:int) = infix_lseq2 y x

(* clone relations.EndoRelation with type t9 = int,
  predicate rel = infix_lseq2,  *)

axiom Refl6 : forall x:int. infix_lseq2 x x

(* clone relations.Reflexive with type t10 = int,
  predicate rel1 = infix_lseq2, prop Refl1 = Refl6 *)

(* clone relations.EndoRelation with type t9 = int,
  predicate rel = infix_lseq2,  *)

axiom Trans6 : forall x:int, y:int, z:int. infix_lseq2 x y -> infix_lseq2 y
  z -> infix_lseq2 x z

(* clone relations.Transitive with type t11 = int,
  predicate rel2 = infix_lseq2, prop Trans1 = Trans6 *)

(* clone relations.PreOrder with type t12 = int,
  predicate rel3 = infix_lseq2, prop Trans2 = Trans6, prop Refl2 = Refl6 *)

(* clone relations.EndoRelation with type t9 = int,
  predicate rel = infix_lseq2,  *)

axiom Antisymm5 : forall x:int, y:int. infix_lseq2 x y -> infix_lseq2 y x ->
  (x = y)

(* clone relations.Antisymmetric with type t13 = int,
  predicate rel4 = infix_lseq2, prop Antisymm1 = Antisymm5 *)

(* clone relations.PartialOrder with type t14 = int,
  predicate rel5 = infix_lseq2, prop Antisymm2 = Antisymm5,
  prop Trans3 = Trans6, prop Refl3 = Refl6 *)

(* clone relations.EndoRelation with type t9 = int,
  predicate rel = infix_lseq2,  *)

axiom Total4 : forall x:int, y:int. infix_lseq2 x y \/ infix_lseq2 y x

(* clone relations.Total with type t15 = int, predicate rel6 = infix_lseq2,
  prop Total1 = Total4 *)

(* clone relations.TotalOrder with type t16 = int,
  predicate rel7 = infix_lseq2, prop Total2 = Total4,
  prop Antisymm3 = Antisymm5, prop Trans4 = Trans6, prop Refl4 = Refl6 *)

axiom ZeroLessOne2 : infix_lseq2 zero6 one4

axiom CompatOrderAdd2 : forall x:int, y:int, z:int. infix_lseq2 x y ->
  infix_lseq2 (infix_pl6 x z) (infix_pl6 y z)

axiom CompatOrderMult2 : forall x:int, y:int, z:int. infix_lseq2 x y ->
  infix_lseq2 zero6 z -> infix_lseq2 (infix_as6 x z) (infix_as6 y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t18 = int,
  predicate infix_gteq3 = infix_gteq2, predicate infix_lseq3 = infix_lseq2,
  function one5 = one4, function infix_mn7 = infix_mn6,
  function infix_as7 = infix_as6, function prefix_mn7 = prefix_mn6,
  function infix_pl7 = infix_pl6, function zero7 = zero6,
  prop CompatOrderMult3 = CompatOrderMult2,
  prop CompatOrderAdd3 = CompatOrderAdd2, prop ZeroLessOne3 = ZeroLessOne2,
  prop Total5 = Total4, prop Antisymm6 = Antisymm5, prop Trans7 = Trans6,
  prop Refl7 = Refl6, prop NonTrivialRing5 = NonTrivialRing4,
  prop Unitary5 = Unitary4, prop Comm15 = Comm14,
  prop Mul_distr_r7 = Mul_distr_r6, prop Mul_distr_l7 = Mul_distr_l6,
  prop Assoc18 = Assoc17, prop Comm16 = Comm13, prop Inv_def_r9 = Inv_def_r8,
  prop Inv_def_l9 = Inv_def_l8, prop Unit_def_r10 = Unit_def_r9,
  prop Unit_def_l10 = Unit_def_l9, prop Assoc19 = Assoc16 *)

(* use int.Int *)

function from_int int : real

axiom Zero : (from_int 0 = 0.0)

axiom One : (from_int 1 = 1.0)

axiom Add : forall x:int, y:int. (from_int (infix_pl6 x y) = infix_pl
  (from_int x) (from_int y))

axiom Sub : forall x:int, y:int. (from_int (infix_mn6 x y) = infix_mn
  (from_int x) (from_int y))

axiom Mul : forall x:int, y:int. (from_int (infix_as6 x y) = infix_as
  (from_int x) (from_int y))

axiom Neg : forall x:int. (from_int (prefix_mn6 x) = prefix_mn (from_int x))

(* use real.FromInt *)

function round mode real : real

function value single : real

function exact single : real

function model single : real

function round_error (x:single) : real = abs (infix_mn (value x) (exact x))

function total_error (x:single) : real = abs (infix_mn (value x) (model x))

predicate no_overflow (m:mode) (x:real) = infix_lseq (abs (round m x))
  max_single

axiom Bounded_real_no_overflow : forall m:mode, x:real. infix_lseq (abs x)
  max_single -> no_overflow m x

axiom Round_monotonic : forall m:mode, x:real, y:real. infix_lseq x y ->
  infix_lseq (round m x) (round m y)

axiom Round_idempotent : forall m1:mode, m2:mode, x:real. (round m1 (round m2
  x) = round m2 x)

axiom Round_value : forall m:mode, x:single. (round m (value x) = value x)

axiom Bounded_value : forall x:single. infix_lseq (abs (value x)) max_single

axiom Exact_rounding_for_integers : forall m:mode, i:int. infix_lseq2
  (prefix_mn6 max_int) i /\ infix_lseq2 i max_int -> (round m (from_int
  i) = from_int i)

axiom Round_down_le : forall x:real. infix_lseq (round Down x) x

axiom Round_up_ge : forall x:real. infix_gteq (round Up x) x

axiom Round_down_neg : forall x:real. (round Down (prefix_mn x) = prefix_mn
  (round Up x))

axiom Round_up_neg : forall x:real. (round Up (prefix_mn x) = prefix_mn
  (round Down x))

function round_logic mode real : single

axiom Round_logic_def : forall m:mode, x:real. no_overflow m x -> (value
  (round_logic m x) = round m x)

(* clone floating_point.GenFloat with type t19 = single,
  function round_logic1 = round_logic,
  function max_representable_integer = max_int,
  predicate no_overflow1 = no_overflow, function max = max_single,
  function total_error1 = total_error, function round_error1 = round_error,
  function model1 = model, function exact1 = exact, function value1 = value,
  function round1 = round, prop Round_logic_def1 = Round_logic_def,
  prop Round_up_neg1 = Round_up_neg, prop Round_down_neg1 = Round_down_neg,
  prop Round_up_ge1 = Round_up_ge, prop Round_down_le1 = Round_down_le,
  prop Exact_rounding_for_integers1 = Exact_rounding_for_integers,
  prop Bounded_value1 = Bounded_value, prop Round_value1 = Round_value,
  prop Round_idempotent1 = Round_idempotent,
  prop Round_monotonic1 = Round_monotonic,
  prop Bounded_real_no_overflow1 = Bounded_real_no_overflow *)

predicate of_real_post (m:mode) (x:real) (res:single) = (value res = round m
  x) /\ (exact res = x) /\ (model res = x)

predicate add_post (m:mode) (x:single) (y:single) (res:single) = (value
  res = round m (infix_pl (value x) (value y))) /\ (exact res = infix_pl
  (exact x) (exact y)) /\ (model res = infix_pl (model x) (model y))

predicate sub_post (m:mode) (x:single) (y:single) (res:single) = (value
  res = round m (infix_mn (value x) (value y))) /\ (exact res = infix_mn
  (exact x) (exact y)) /\ (model res = infix_mn (model x) (model y))

predicate mul_post (m:mode) (x:single) (y:single) (res:single) = (value
  res = round m (infix_as (value x) (value y))) /\ (exact res = infix_as
  (exact x) (exact y)) /\ (model res = infix_as (model x) (model y))

predicate div_post (m:mode) (x:single) (y:single) (res:single) = (value
  res = round m (infix_sl (value x) (value y))) /\ (exact res = infix_sl
  (exact x) (exact y)) /\ (model res = infix_sl (model x) (model y))

predicate neg_post (x:single) (res:single) = (value res = prefix_mn (value
  x)) /\ (exact res = prefix_mn (exact x)) /\ (model res = prefix_mn (model
  x))

predicate lt (x:single) (y:single) = infix_ls (value x) (value y)

predicate gt (x:single) (y:single) = infix_gt (value x) (value y)

(* clone floating_point.GenFloatSpecStrict with type t20 = single,
  predicate gt1 = gt, predicate lt1 = lt, predicate neg_post1 = neg_post,
  predicate div_post1 = div_post, predicate mul_post1 = mul_post,
  predicate sub_post1 = sub_post, predicate add_post1 = add_post,
  predicate of_real_post1 = of_real_post,
  function round_logic2 = round_logic,
  function max_representable_integer1 = max_int,
  predicate no_overflow2 = no_overflow, function max1 = max_single,
  function total_error2 = total_error, function round_error2 = round_error,
  function model2 = model, function exact2 = exact, function value2 = value,
  function round2 = round, prop Round_logic_def2 = Round_logic_def,
  prop Round_up_neg2 = Round_up_neg, prop Round_down_neg2 = Round_down_neg,
  prop Round_up_ge2 = Round_up_ge, prop Round_down_le2 = Round_down_le,
  prop Exact_rounding_for_integers2 = Exact_rounding_for_integers,
  prop Bounded_value2 = Bounded_value, prop Round_value2 = Round_value,
  prop Round_idempotent2 = Round_idempotent,
  prop Round_monotonic2 = Round_monotonic,
  prop Bounded_real_no_overflow2 = Bounded_real_no_overflow *)

(* use floating_point.Single *)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_my_cosine "expl:VC for my_cosine" : forall x:single.
  ("stop_split" infix_lseqdt (abs (value x)) 0x1.p-5) -> ("asym_split"
  "expl:assertion" infix_lseqdt (abs (infix_mndt (infix_mndt 1.0 (infix_asdt
  (infix_asdt (value x) (value x)) 0.5)) (cos (value x)))) 0x1.p-24)

end
