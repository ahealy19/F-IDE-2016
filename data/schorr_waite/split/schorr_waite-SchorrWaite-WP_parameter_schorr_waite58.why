theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type seq 'a

(* meta infinite_type type seq *)

function length (seq 'a) : int

axiom length_nonnegative : forall s:seq 'a. infix_lseq 0 (length s)

function empty : seq 'a

axiom empty_length : (length (empty:seq 'a) = 0)

function get (seq 'a) int : 'a

function mixfix_lbrb (s:seq 'a) (i:int) : 'a = get s i

function set (seq 'a) int 'a : seq 'a

axiom set_def1 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length s) -> (length (set s i v) = length s)

axiom set_def2 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length s) -> (get (set s i v) i = v)

axiom set_def3 : forall s:seq 'a, i:int, v:'a. infix_lseq 0 i /\ infix_ls i
  (length s) -> (forall j:int. infix_lseq 0 j /\ infix_ls j (length s) ->
  not (j = i) -> (get (set s i v) j = get s j))

function mixfix_lblsmnrb (s:seq 'a) (i:int) (v:'a) : seq 'a = set s i v

predicate infix_eqeq (s1:seq 'a) (s2:seq 'a) = ("asym_split" (length
  s1 = length s2)) && (forall i:int. infix_lseq 0 i /\ infix_ls i (length
  s1) -> (mixfix_lbrb s1 i = mixfix_lbrb s2 i))

axiom extensionality : forall s1:seq 'a, s2:seq 'a. infix_eqeq s1 s2 ->
  (s1 = s2)

function cons 'a (seq 'a) : seq 'a

axiom cons_length : forall x:'a, s:seq 'a. (length (cons x s) = infix_pl 1
  (length s))

axiom cons_get : forall x:'a, s:seq 'a, i:int. infix_lseq 0 i /\ infix_lseq i
  (length s) -> (mixfix_lbrb (cons x s) i = if (i = 0) then x
  else mixfix_lbrb s (infix_mn i 1))

function snoc (seq 'a) 'a : seq 'a

axiom snoc_length : forall s:seq 'a, x:'a. (length (snoc s x) = infix_pl 1
  (length s))

axiom snoc_get : forall s:seq 'a, x:'a, i:int. infix_lseq 0 i /\ infix_lseq i
  (length s) -> (mixfix_lbrb (snoc s x)
  i = if infix_ls i (length s) then mixfix_lbrb s i else x)

axiom snoc_last : forall s:seq 'a, x:'a. (mixfix_lbrb (snoc s x) (length
  s) = x)

function mixfix_lb_dtdt_rb (seq 'a) int int : seq 'a

axiom sub_length : forall s:seq 'a, i:int, j:int. infix_lseq 0 i /\
  infix_lseq i j /\ infix_lseq j (length s) -> (length (mixfix_lb_dtdt_rb s i
  j) = infix_mn j i)

axiom sub_get : forall s:seq 'a, i:int, j:int. infix_lseq 0 i /\ infix_lseq i
  j /\ infix_lseq j (length s) -> (forall k:int. infix_lseq 0 k /\ infix_ls k
  (infix_mn j i) -> (mixfix_lbrb (mixfix_lb_dtdt_rb s i j) k = mixfix_lbrb s
  (infix_pl i k)))

function mixfix_lb_dtdtrb (s:seq 'a) (i:int) : seq 'a = mixfix_lb_dtdt_rb s i
  (length s)

function mixfix_lbdtdt_rb (s:seq 'a) (j:int) : seq 'a = mixfix_lb_dtdt_rb s 0
  j

function infix_plpl (seq 'a) (seq 'a) : seq 'a

axiom concat_length : forall s1:seq 'a, s2:seq 'a. (length (infix_plpl s1
  s2) = infix_pl (length s1) (length s2))

axiom concat_get1 : forall s1:seq 'a, s2:seq 'a, i:int. infix_lseq 0 i /\
  infix_ls i (length s1) -> (mixfix_lbrb (infix_plpl s1 s2) i = mixfix_lbrb
  s1 i)

axiom concat_get2 : forall s1:seq 'a, s2:seq 'a, i:int. infix_lseq (length
  s1) i /\ infix_ls i (infix_pl (length s1) (length s2)) -> (mixfix_lbrb
  (infix_plpl s1 s2) i = mixfix_lbrb s2 (infix_mn i (length s1)))

type func 'a 'b

type pred 'a = func 'a bool

function infix_at (func 'a 'b) 'a : 'b

(* use why3.HighOrd.HighOrd *)

function create int (func int 'a) : seq 'a

axiom create_length : forall len:int, f:func int 'a. infix_lseq 0 len ->
  (length (create len f) = len)

axiom create_get : forall len:int, f:func int 'a, i:int. infix_lseq 0 i /\
  infix_ls i len -> (mixfix_lbrb (create len f) i = infix_at f i)

(* use seq.Seq *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get1 (map 'a 'b) 'a : 'b

function set1 (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb1 (a:map 'a 'b) (i:'a) : 'b = get1 a i

function mixfix_lblsmnrb1 (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set1 a i
  v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb1 (mixfix_lblsmnrb1 m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb1
  (mixfix_lblsmnrb1 m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb1 (mixfix_lblsmnrb1 m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb1
  (mixfix_lblsmnrb1 m a1 b) a2 = mixfix_lbrb1 m a2)

(* use map.Map *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

type list 'a =
  | Nil
  | Cons 'a (list 'a)

(* use list.List *)

function length1 (l:list 'a) : int =
  match l with
  | Nil -> 0
  | Cons _ r -> infix_pl 1 (length1 r)
  end

axiom Length_nonnegative : forall l:list 'a. infix_gteq (length1 l) 0

axiom Length_nil : forall l:list 'a. (length1 l = 0) <-> (l = Nil:list 'a)

(* use list.Length *)

function infix_plpl1 (l1:list 'a) (l2:list 'a) : list 'a =
  match l1 with
  | Nil -> l2
  | Cons x1 r1 -> Cons x1 (infix_plpl1 r1 l2)
  end

axiom Append_assoc : forall l1:list 'a, l2:list 'a, l3:list 'a. (infix_plpl1
  l1 (infix_plpl1 l2 l3) = infix_plpl1 (infix_plpl1 l1 l2) l3)

axiom Append_l_nil : forall l:list 'a. (infix_plpl1 l (Nil:list 'a) = l)

axiom Append_length : forall l1:list 'a, l2:list 'a. (length1 (infix_plpl1 l1
  l2) = infix_pl (length1 l1) (length1 l2))

predicate mem (x:'a) (l:list 'a) =
  match l with
  | Nil -> false
  | Cons y r -> (x = y) \/ mem x r
  end

(* use list.Mem *)

axiom mem_append : forall x:'a, l1:list 'a, l2:list 'a. mem x (infix_plpl1 l1
  l2) <-> mem x l1 \/ mem x l2

axiom mem_decomp : forall x:'a, l:list 'a. mem x l -> (exists l1:list 'a, l2:
  list 'a. (l = infix_plpl1 l1 (Cons x l2)))

(* use list.Append *)

type set 'a

(* meta material_type_arg type set, 0 *)

predicate mem1 'a (set 'a)

predicate infix_eqeq1 (s1:set 'a) (s2:set 'a) = forall x:'a. mem1 x s1 <->
  mem1 x s2

axiom extensionality1 : forall s1:set 'a, s2:set 'a. infix_eqeq1 s1 s2 ->
  (s1 = s2)

predicate subset (s1:set 'a) (s2:set 'a) = forall x:'a. mem1 x s1 -> mem1 x
  s2

axiom subset_refl : forall s:set 'a. subset s s

axiom subset_trans : forall s1:set 'a, s2:set 'a, s3:set 'a. subset s1 s2 ->
  subset s2 s3 -> subset s1 s3

function empty1 : set 'a

predicate is_empty (s:set 'a) = forall x:'a. not mem1 x s

axiom empty_def1 : is_empty (empty1:set 'a)

axiom mem_empty : forall x:'a. mem1 x (empty1:set 'a) <-> false

function add 'a (set 'a) : set 'a

axiom add_def1 : forall x:'a, y:'a. forall s:set 'a. mem1 x (add y s) <->
  (x = y) \/ mem1 x s

function singleton (x:'a) : set 'a = add x (empty1:set 'a)

function remove 'a (set 'a) : set 'a

axiom remove_def1 : forall x:'a, y:'a, s:set 'a. mem1 x (remove y s) <->
  not (x = y) /\ mem1 x s

axiom add_remove : forall x:'a, s:set 'a. mem1 x s -> (add x (remove x
  s) = s)

axiom remove_add : forall x:'a, s:set 'a. (remove x (add x s) = remove x s)

axiom subset_remove : forall x:'a, s:set 'a. subset (remove x s) s

function union (set 'a) (set 'a) : set 'a

axiom union_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem1 x (union s1
  s2) <-> mem1 x s1 \/ mem1 x s2

function inter (set 'a) (set 'a) : set 'a

axiom inter_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem1 x (inter s1
  s2) <-> mem1 x s1 /\ mem1 x s2

function diff (set 'a) (set 'a) : set 'a

axiom diff_def1 : forall s1:set 'a, s2:set 'a, x:'a. mem1 x (diff s1 s2) <->
  mem1 x s1 /\ not mem1 x s2

axiom subset_diff : forall s1:set 'a, s2:set 'a. subset (diff s1 s2) s1

function choose (set 'a) : 'a

axiom choose_def : forall s:set 'a. not is_empty s -> mem1 (choose s) s

(* clone set.SetGen with type set1 = set, function choose1 = choose,
  function diff1 = diff, function inter1 = inter, function union1 = union,
  function remove1 = remove, function singleton1 = singleton,
  function add1 = add, predicate is_empty1 = is_empty,
  function empty2 = empty1, predicate subset1 = subset,
  predicate infix_eqeq2 = infix_eqeq1, predicate mem2 = mem1,
  prop choose_def1 = choose_def, prop subset_diff1 = subset_diff,
  prop diff_def11 = diff_def1, prop inter_def11 = inter_def1,
  prop union_def11 = union_def1, prop subset_remove1 = subset_remove,
  prop remove_add1 = remove_add, prop add_remove1 = add_remove,
  prop remove_def11 = remove_def1, prop add_def11 = add_def1,
  prop mem_empty1 = mem_empty, prop empty_def11 = empty_def1,
  prop subset_trans1 = subset_trans, prop subset_refl1 = subset_refl,
  prop extensionality2 = extensionality1 *)

function cardinal (set 'a) : int

axiom cardinal_nonneg : forall s:set 'a. infix_gteq (cardinal s) 0

axiom cardinal_empty : forall s:set 'a. (cardinal s = 0) <-> is_empty s

axiom cardinal_add : forall x:'a. forall s:set 'a. not mem1 x s -> (cardinal
  (add x s) = infix_pl 1 (cardinal s))

axiom cardinal_remove : forall x:'a. forall s:set 'a. mem1 x s -> (cardinal
  s = infix_pl 1 (cardinal (remove x s)))

axiom cardinal_subset : forall s1:set 'a, s2:set 'a. subset s1 s2 ->
  infix_lseq (cardinal s1) (cardinal s2)

axiom subset_eq : forall s1:set 'a, s2:set 'a. subset s1 s2 -> (cardinal
  s1 = cardinal s2) -> infix_eqeq1 s1 s2

axiom cardinal1 : forall s:set 'a. (cardinal s = 1) -> (forall x:'a. mem1 x
  s -> (x = choose s))

(* use set.Fset *)

type loc

function null : loc

type stacknodes = seq loc

predicate not_in_stack (n:loc) (s:seq loc) = forall i:int. infix_lseq 0 i /\
  infix_ls i (length s) -> not (n = get s i)

axiom cons_not_in "why3:lemma" : forall s:seq loc, n:loc, t:loc.
  ("stop_split" not_in_stack n (cons t s)) -> ("stop_split" not_in_stack n s)

axiom tl_cons "why3:lemma" : forall s1:seq loc, s2:seq loc, p:loc.
  ("stop_split" infix_gt (length s2) 0) /\
  ("stop_split" (s1 = mixfix_lb_dtdtrb s2 1)) /\ ("stop_split" (p = get s2
  0)) -> ("stop_split" (s2 = cons p s1))

function last (s:seq loc) : loc = get s (infix_mn (length s) 1)

predicate distinct (s:seq loc) = forall i:int, j:int. infix_lseq 0 i /\
  infix_ls i (length s) -> infix_lseq 0 j /\ infix_ls j (length s) ->
  not (i = j) -> not (get s i = get s j)

predicate edge (x:loc) (y:loc) (left:map loc loc) (right:map loc loc) =
  not (x = null) /\ ((mixfix_lbrb1 left x = y) \/ (mixfix_lbrb1 right x = y))

inductive path (map loc loc) (map loc loc) loc loc (list loc) =
  | path_nil : forall x:loc, l:map loc loc, r:map loc loc. path l r x x
      (Nil:list loc)
  | path_cons : forall x:loc, y:loc, z:loc, l:map loc loc, r:map loc loc, p:
      list loc. edge x z l r -> path l r z y p -> path l r x y (Cons x p)

axiom trans_path "why3:lemma" : forall x:loc, y:loc, z:loc, l:map loc loc, r:
  map loc loc, p1:list loc, p2:list loc. ("stop_split" path l r x y p1) /\
  ("stop_split" path l r y z p2) -> ("stop_split" path l r x z (infix_plpl1
  p1 p2))

axiom path_edge : forall x:loc, y:loc, left:map loc loc, right:map loc loc.
  edge x y left right -> path left right x y (Cons x (Nil:list loc))

axiom path_edge_cons : forall n:loc, x:loc, y:loc, left:map loc loc, right:
  map loc loc, pth:list loc. path left right n x pth -> edge x y left
  right -> path left right n y (infix_plpl1 pth (Cons x (Nil:list loc)))

predicate reachable (left:map loc loc) (right:map loc loc) (x:loc) (y:loc) =
  exists p:list loc. path left right x y p

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_schorr_waite "expl:VC for schorr_waite" : forall root:loc,
  graph:set loc. forall path_from_root:map loc (list loc), right:map loc loc,
  left:map loc loc, c:map loc bool, m:map loc bool.
  ("stop_split" not (root = null) /\ mem1 root graph) /\
  ("stop_split" forall n:loc. mem1 n graph -> not (n = null) /\ mem1
  (mixfix_lbrb1 left n) graph /\ mem1 (mixfix_lbrb1 right n) graph) /\
  ("stop_split" forall x:loc. mem1 x graph -> not (get1 m x = True)) ->
  ("asym_split" "stop_split" "expl:precondition" not (root = null)) ->
  (forall path_from_root1:map loc (list loc).
  ("stop_split" (path_from_root1 = set1 path_from_root root (Nil:list
  loc))) -> (forall c_false_nodes:set loc, unmarked_nodes:set loc, pth:list
  loc, stackNodes:seq loc, p:loc, t:loc, path_from_root2:map loc (list loc),
  right1:map loc loc, left1:map loc loc, c1:map loc bool, m1:map loc bool.
  ("stop_split" forall n:loc. mem1 n graph -> not_in_stack n stackNodes \/
  (exists i:int. (get stackNodes i = n))) /\ ("stop_split" not_in_stack null
  stackNodes) /\ ("stop_split" (length stackNodes = 0) <-> (p = null)) /\
  ("stop_split" mem1 t graph) /\ ("stop_split" not (p = null) -> mem1 p
  graph) /\ ("stop_split" not (length stackNodes = 0) -> (get stackNodes
  0 = p)) /\ ("stop_split" forall n:loc. mem1 n graph -> not (get1 m1
  n = True) -> mem1 n unmarked_nodes) /\ ("stop_split" forall n:loc. mem1 n
  graph -> not (get1 c1 n = True) -> mem1 n c_false_nodes) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i (length
  stackNodes) -> mem1 (get stackNodes i) graph) /\ ("stop_split" forall i:
  int. infix_lseq 0 i /\ infix_ls i (infix_mn (length stackNodes) 1) ->
  (let p1 = get stackNodes i in let p2 = get stackNodes (infix_pl i 1) in
  ((get1 c1 p2 = True) -> (mixfix_lbrb1 left p2 = mixfix_lbrb1 left1 p2) /\
  (mixfix_lbrb1 right p2 = p1)) /\ (not (get1 c1 p2 = True) -> (mixfix_lbrb1
  left p2 = p1) /\ (mixfix_lbrb1 right p2 = mixfix_lbrb1 right1 p2)))) /\
  ("stop_split" (get1 path_from_root2 root = Nil:list loc)) /\
  ("stop_split" forall n:loc. mem1 n graph -> not_in_stack n stackNodes ->
  (mixfix_lbrb1 left1 n = mixfix_lbrb1 left n) /\ (mixfix_lbrb1 right1
  n = mixfix_lbrb1 right n)) /\ ("stop_split" not (length stackNodes = 0) ->
  (let first = last stackNodes in
  if (get1 c1 first = True) then (mixfix_lbrb1 right1 first = null)
  else (mixfix_lbrb1 left1 first = null))) /\ ("stop_split" not (length
  stackNodes = 0) -> (last stackNodes = root)) /\ ("stop_split" forall k:int.
  infix_lseq 0 k /\ infix_ls k (infix_mn (length stackNodes) 1) ->
  (if (get1 c1 (get stackNodes k) = True) then (mixfix_lbrb1 right1 (get
  stackNodes k) = get stackNodes (infix_pl k 1)) else (mixfix_lbrb1 left1
  (get stackNodes k) = get stackNodes (infix_pl k 1)))) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i (length
  stackNodes) -> (get1 m1 (get stackNodes i) = True)) /\
  ("stop_split" distinct stackNodes) /\ ("stop_split" forall i:int.
  infix_lseq 0 i /\ infix_ls i (length stackNodes) ->
  (let n = get stackNodes i in if (get1 c1 n = True) then (mixfix_lbrb1 left1
  n = mixfix_lbrb1 left n) else (mixfix_lbrb1 right1 n = mixfix_lbrb1 right
  n))) /\ ("stop_split" not (length stackNodes = 0) ->
  (if (get1 c1 p = True) then (mixfix_lbrb1 right p = t) else (mixfix_lbrb1
  left p = t))) /\ ("stop_split" forall k:int. infix_ls 0 k /\ infix_ls k
  (length stackNodes) -> (let n = get stackNodes k in
  if (get1 c1 n = True) then (get stackNodes (infix_mn k 1) = mixfix_lbrb1
  right n) else (get stackNodes (infix_mn k 1) = mixfix_lbrb1 left n))) /\
  ("stop_split" not (p = null) -> path left right root p pth) /\
  ("stop_split" forall n:loc. mem1 n graph -> (get1 m1 n = True) -> reachable
  left right root n) /\ ("stop_split" (p = null) -> (t = root)) /\
  ("stop_split" forall n:loc, pth1:list loc. mem1 n graph -> (get1 m1
  n = True) -> (pth1 = get1 path_from_root2 n) -> path left right root n
  pth1) /\ ("stop_split" forall n:loc. mem1 n graph -> not (n = null) ->
  (get1 m1 n = True) -> not_in_stack n stackNodes -> (not (mixfix_lbrb1 left1
  n = null) -> (get1 m1 (mixfix_lbrb1 left1 n) = True)) /\ (not (mixfix_lbrb1
  right1 n = null) -> (get1 m1 (mixfix_lbrb1 right1 n) = True))) /\
  ("stop_split" forall i:int. infix_lseq 0 i /\ infix_ls i (length
  stackNodes) -> (let n = get stackNodes i in (get1 c1 n = True) ->
  (not (mixfix_lbrb1 left1 n = null) -> (get1 m1 (mixfix_lbrb1 left1
  n) = True)) /\ (not (mixfix_lbrb1 right1 n = null) -> (get1 m1
  (mixfix_lbrb1 right1 n) = True)))) -> not (p = null) -> (t = null) ->
  ("asym_split" "stop_split" "expl:precondition" not (p = null)) -> not (get1
  c1 p = True) -> ("asym_split" "stop_split"
  "expl:precondition" not (p = null)) -> (forall t1:loc.
  ("stop_split" (t1 = mixfix_lbrb1 right1 p)) -> ("asym_split" "stop_split"
  "expl:precondition" not (p = null)) -> ("asym_split" "stop_split"
  "expl:precondition" not (p = null)) -> (forall right2:map loc loc.
  ("stop_split" (right2 = set1 right1 p (mixfix_lbrb1 left1 p))) ->
  ("asym_split" "stop_split" "expl:precondition" not (p = null)) ->
  (forall left2:map loc loc. ("stop_split" (left2 = set1 left1 p t)) ->
  (forall c_false_nodes1:set loc. ("stop_split" (c_false_nodes1 = remove p
  c_false_nodes)) -> ("asym_split" "stop_split"
  "expl:precondition" not (p = null)) -> (forall c2:map loc bool.
  ("stop_split" (c2 = set1 c1 p True)) ->
  ("expl:loop invariant preservation" not_in_stack null stackNodes))))))))

end
