theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

type key = int

type value = int

type color =
  | Red
  | Black

type tree =
  | Leaf
  | Node color tree int int tree

predicate memt (t:tree) (k:int) (v:int) =
  match t with
  | Leaf -> false
  | Node _ l kqt vqt r -> (k = kqt) /\ (v = vqt) \/ memt l k v \/ memt r k v
  end

axiom memt_color : forall l:tree, r:tree, k:int, kqt:int, v:int, vqt:int, c:
  color, cqt:color. memt (Node c l k v r) kqt vqt -> memt (Node cqt l k v r)
  kqt vqt

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

predicate lt_tree (x:int) (t:tree) = forall k:int. forall v:int. memt t k
  v -> infix_ls k x

predicate gt_tree (x:int) (t:tree) = forall k:int. forall v:int. memt t k
  v -> infix_ls x k

axiom lt_leaf : forall x:int. lt_tree x Leaf

axiom gt_leaf : forall x:int. gt_tree x Leaf

axiom lt_tree_node : forall x:int, y:int, v:int, l:tree, r:tree, c:color.
  lt_tree x l -> lt_tree x r -> infix_ls y x -> lt_tree x (Node c l y v r)

axiom gt_tree_node : forall x:int, y:int, v:int, l:tree, r:tree, c:color.
  gt_tree x l -> gt_tree x r -> infix_ls x y -> gt_tree x (Node c l y v r)

axiom lt_node_lt : forall x:int, y:int, v:int, l:tree, r:tree, c:color.
  lt_tree x (Node c l y v r) -> infix_ls y x

axiom gt_node_gt : forall x:int, y:int, v:int, l:tree, r:tree, c:color.
  gt_tree x (Node c l y v r) -> infix_ls x y

axiom lt_left : forall x:int, y:int, v:int, l:tree, r:tree, c:color. lt_tree
  x (Node c l y v r) -> lt_tree x l

axiom lt_right : forall x:int, y:int, v:int, l:tree, r:tree, c:color. lt_tree
  x (Node c l y v r) -> lt_tree x r

axiom gt_left : forall x:int, y:int, v:int, l:tree, r:tree, c:color. gt_tree
  x (Node c l y v r) -> gt_tree x l

axiom gt_right : forall x:int, y:int, v:int, l:tree, r:tree, c:color. gt_tree
  x (Node c l y v r) -> gt_tree x r

axiom lt_tree_not_in : forall x:int, t:tree. lt_tree x t -> (forall v:int.
  not memt t x v)

axiom lt_tree_trans : forall x:int, y:int. infix_ls x y -> (forall t:tree.
  lt_tree x t -> lt_tree y t)

axiom gt_tree_not_in : forall x:int, t:tree. gt_tree x t -> (forall v:int.
  not memt t x v)

axiom gt_tree_trans : forall x:int, y:int. infix_ls y x -> (forall t:tree.
  gt_tree x t -> gt_tree y t)

predicate bst (t:tree) =
  match t with
  | Leaf -> true
  | Node _ l k _ r -> bst l /\ bst r /\ lt_tree k l /\ gt_tree k r
  end

axiom bst_Leaf : bst Leaf

axiom bst_left : forall k:int, v:int, l:tree, r:tree, c:color. bst (Node c l
  k v r) -> bst l

axiom bst_right : forall k:int, v:int, l:tree, r:tree, c:color. bst (Node c l
  k v r) -> bst r

axiom bst_color : forall c:color, cqt:color, k:int, v:int, l:tree, r:tree.
  bst (Node c l k v r) -> bst (Node cqt l k v r)

axiom rotate_left : forall kx:int, ky:int, vx:int, vy:int, a:tree, b:tree, c:
  tree, c1:color, c2:color, c3:color, c4:color. bst (Node c1 a kx vx (Node c2
  b ky vy c)) -> bst (Node c3 (Node c4 a kx vx b) ky vy c)

axiom rotate_right : forall kx:int, ky:int, vx:int, vy:int, a:tree, b:tree,
  c:tree, c1:color, c2:color, c3:color, c4:color. bst (Node c3 (Node c4 a kx
  vx b) ky vy c) -> bst (Node c1 a kx vx (Node c2 b ky vy c))

predicate is_not_red (t:tree) =
  match t with
  | Node Red _ _ _ _ -> false
  | Leaf | Node Black _ _ _ _ -> true
  end

predicate rbtree (n:int) (t:tree) =
  match t with
  | Leaf -> (n = 0)
  | Node Red l _ _ r -> rbtree n l /\ rbtree n r /\ is_not_red l /\
      is_not_red r
  | Node Black l _ _ r -> rbtree (infix_mn n 1) l /\ rbtree (infix_mn n 1) r
  end

axiom rbtree_Leaf : rbtree 0 Leaf

axiom rbtree_Node1 : forall k:int, v:int. rbtree 0 (Node Red Leaf k v Leaf)

axiom rbtree_left : forall x:int, v:int, l:tree, r:tree, c:color. (exists n:
  int. rbtree n (Node c l x v r)) -> (exists n:int. rbtree n l)

axiom rbtree_right : forall x:int, v:int, l:tree, r:tree, c:color. (exists n:
  int. rbtree n (Node c l x v r)) -> (exists n:int. rbtree n r)

predicate almost_rbtree (n:int) (t:tree) =
  match t with
  | Leaf -> (n = 0)
  | Node Red l _ _ r -> rbtree n l /\ rbtree n r
  | Node Black l _ _ r -> rbtree (infix_mn n 1) l /\ rbtree (infix_mn n 1) r
  end

axiom rbtree_almost_rbtree : forall n:int, t:tree. rbtree n t ->
  almost_rbtree n t

axiom rbtree_almost_rbtree_ex : forall s:tree. (exists n:int. rbtree n s) ->
  (exists n:int. almost_rbtree n s)

axiom almost_rbtree_rbtree_black : forall x:int, v:int, l:tree, r:tree, n:
  int. almost_rbtree n (Node Black l x v r) -> rbtree n (Node Black l x v r)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_lbalance "expl:VC for lbalance" : forall l:tree, k:int, v:
  int, r:tree. ("stop_split" lt_tree k l /\ gt_tree k r /\ bst l /\ bst r) ->
  (forall x:color, x1:tree, x2:int, x3:int, x4:tree. (l = Node x x1 x2 x3
  x4) -> (forall x5:color, x6:tree, x7:int, x8:int, x9:tree. (x4 = Node x5 x6
  x7 x8 x9) -> (x5 = Red) -> (forall x10:color, x11:tree, x12:int, x13:int,
  x14:tree. (x1 = Node x10 x11 x12 x13 x14) -> (x10 = Red) -> (x = Black) ->
  (let result = Node Black l k v r in "expl:postcondition" bst result /\
  (forall n:int. almost_rbtree n l -> rbtree n r -> rbtree (infix_pl n 1)
  result) /\ (forall kqt:int, vqt:int. memt result kqt vqt <->
  (if (kqt = k) then (vqt = v) else memt l kqt vqt \/ memt r kqt vqt))))))

end
