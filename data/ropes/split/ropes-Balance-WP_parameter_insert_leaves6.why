theory Task
(* use why3.BuiltIn.BuiltIn *)

type bool =
  | True
  | False

(* use why3.Bool.Bool *)

type tuple0 =
  | Tuple0

(* use why3.Tuple0.Tuple01 *)

type unit = tuple0

(* use why3.Unit.Unit *)

(* use why3.Prelude.Prelude *)

function zero : int = 0

function one : int = 1

predicate infix_ls int int

predicate infix_gt (x:int) (y:int) = infix_ls y x

predicate infix_lseq (x:int) (y:int) = infix_ls x y \/ (x = y)

function infix_pl int int : int

function prefix_mn int : int

function infix_as int int : int

axiom Assoc : forall x:int, y:int, z:int. (infix_pl (infix_pl x y)
  z = infix_pl x (infix_pl y z))

(* clone algebra.Assoc with type t = int, function op = infix_pl,
  prop Assoc1 = Assoc *)

axiom Unit_def_l : forall x:int. (infix_pl zero x = x)

axiom Unit_def_r : forall x:int. (infix_pl x zero = x)

(* clone algebra.Monoid with type t1 = int, function unit = zero,
  function op1 = infix_pl, prop Unit_def_r1 = Unit_def_r,
  prop Unit_def_l1 = Unit_def_l, prop Assoc2 = Assoc *)

axiom Inv_def_l : forall x:int. (infix_pl (prefix_mn x) x = zero)

axiom Inv_def_r : forall x:int. (infix_pl x (prefix_mn x) = zero)

(* clone algebra.Group with type t2 = int, function inv = prefix_mn,
  function unit1 = zero, function op2 = infix_pl,
  prop Inv_def_r1 = Inv_def_r, prop Inv_def_l1 = Inv_def_l,
  prop Unit_def_r2 = Unit_def_r, prop Unit_def_l2 = Unit_def_l,
  prop Assoc3 = Assoc *)

axiom Comm : forall x:int, y:int. (infix_pl x y = infix_pl y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_pl,
  prop Comm1 = Comm *)

(* meta AC function infix_pl *)

(* clone algebra.CommutativeGroup with type t4 = int,
  function inv1 = prefix_mn, function unit2 = zero, function op4 = infix_pl,
  prop Comm2 = Comm, prop Inv_def_r2 = Inv_def_r,
  prop Inv_def_l2 = Inv_def_l, prop Unit_def_r3 = Unit_def_r,
  prop Unit_def_l3 = Unit_def_l, prop Assoc4 = Assoc *)

axiom Assoc5 : forall x:int, y:int, z:int. (infix_as (infix_as x y)
  z = infix_as x (infix_as y z))

(* clone algebra.Assoc with type t = int, function op = infix_as,
  prop Assoc1 = Assoc5 *)

axiom Mul_distr_l : forall x:int, y:int, z:int. (infix_as x (infix_pl y
  z) = infix_pl (infix_as x y) (infix_as x z))

axiom Mul_distr_r : forall x:int, y:int, z:int. (infix_as (infix_pl y z)
  x = infix_pl (infix_as y x) (infix_as z x))

function infix_mn (x:int) (y:int) : int = infix_pl x (prefix_mn y)

(* clone algebra.Ring with type t5 = int, function infix_mn1 = infix_mn,
  function infix_as1 = infix_as, function prefix_mn1 = prefix_mn,
  function infix_pl1 = infix_pl, function zero1 = zero,
  prop Mul_distr_r1 = Mul_distr_r, prop Mul_distr_l1 = Mul_distr_l,
  prop Assoc6 = Assoc5, prop Comm3 = Comm, prop Inv_def_r3 = Inv_def_r,
  prop Inv_def_l3 = Inv_def_l, prop Unit_def_r4 = Unit_def_r,
  prop Unit_def_l4 = Unit_def_l, prop Assoc7 = Assoc *)

axiom Comm4 : forall x:int, y:int. (infix_as x y = infix_as y x)

(* clone algebra.Comm with type t3 = int, function op3 = infix_as,
  prop Comm1 = Comm4 *)

(* meta AC function infix_as *)

(* clone algebra.CommutativeRing with type t6 = int,
  function infix_mn2 = infix_mn, function infix_as2 = infix_as,
  function prefix_mn2 = prefix_mn, function infix_pl2 = infix_pl,
  function zero2 = zero, prop Comm5 = Comm4, prop Mul_distr_r2 = Mul_distr_r,
  prop Mul_distr_l2 = Mul_distr_l, prop Assoc8 = Assoc5, prop Comm6 = Comm,
  prop Inv_def_r4 = Inv_def_r, prop Inv_def_l4 = Inv_def_l,
  prop Unit_def_r5 = Unit_def_r, prop Unit_def_l5 = Unit_def_l,
  prop Assoc9 = Assoc *)

axiom Unitary : forall x:int. (infix_as one x = x)

axiom NonTrivialRing : not (zero = one)

(* clone algebra.UnitaryCommutativeRing with type t7 = int,
  function one1 = one, function infix_mn3 = infix_mn,
  function infix_as3 = infix_as, function prefix_mn3 = prefix_mn,
  function infix_pl3 = infix_pl, function zero3 = zero,
  prop NonTrivialRing1 = NonTrivialRing, prop Unitary1 = Unitary,
  prop Comm7 = Comm4, prop Mul_distr_r3 = Mul_distr_r,
  prop Mul_distr_l3 = Mul_distr_l, prop Assoc10 = Assoc5, prop Comm8 = Comm,
  prop Inv_def_r5 = Inv_def_r, prop Inv_def_l5 = Inv_def_l,
  prop Unit_def_r6 = Unit_def_r, prop Unit_def_l6 = Unit_def_l,
  prop Assoc11 = Assoc *)

predicate infix_gteq (x:int) (y:int) = infix_lseq y x

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Refl : forall x:int. infix_lseq x x

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Trans : forall x:int, y:int, z:int. infix_lseq x y -> infix_lseq y z ->
  infix_lseq x z

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans, prop Refl2 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Antisymm : forall x:int, y:int. infix_lseq x y -> infix_lseq y x ->
  (x = y)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm,
  prop Trans3 = Trans, prop Refl3 = Refl *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

axiom Total : forall x:int, y:int. infix_lseq x y \/ infix_lseq y x

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total,
  prop Antisymm3 = Antisymm, prop Trans4 = Trans, prop Refl4 = Refl *)

axiom ZeroLessOne : infix_lseq zero one

axiom CompatOrderAdd : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq (infix_pl x z) (infix_pl y z)

axiom CompatOrderMult : forall x:int, y:int, z:int. infix_lseq x y ->
  infix_lseq zero z -> infix_lseq (infix_as x z) (infix_as y z)

(* clone algebra.OrderedUnitaryCommutativeRing with type t16 = int,
  predicate infix_gteq1 = infix_gteq, predicate infix_lseq1 = infix_lseq,
  function one2 = one, function infix_mn4 = infix_mn,
  function infix_as4 = infix_as, function prefix_mn4 = prefix_mn,
  function infix_pl4 = infix_pl, function zero4 = zero,
  prop CompatOrderMult1 = CompatOrderMult,
  prop CompatOrderAdd1 = CompatOrderAdd, prop ZeroLessOne1 = ZeroLessOne,
  prop Total3 = Total, prop Antisymm4 = Antisymm, prop Trans5 = Trans,
  prop Refl5 = Refl, prop NonTrivialRing2 = NonTrivialRing,
  prop Unitary2 = Unitary, prop Comm9 = Comm4,
  prop Mul_distr_r4 = Mul_distr_r, prop Mul_distr_l4 = Mul_distr_l,
  prop Assoc12 = Assoc5, prop Comm10 = Comm, prop Inv_def_r6 = Inv_def_r,
  prop Inv_def_l6 = Inv_def_l, prop Unit_def_r7 = Unit_def_r,
  prop Unit_def_l7 = Unit_def_l, prop Assoc13 = Assoc *)

(* use int.Int *)

type char

function dummy_char : char

type string

function length string : int

axiom length_nonnegative : forall s:string. infix_gteq (length s) 0

function mixfix_lbrb string int : char

function empty : string

axiom empty_def : (length empty = 0)

predicate infix_eqeq (s1:string) (s2:string) = (length s1 = length s2) /\
  (forall i:int. infix_lseq 0 i /\ infix_ls i (length s1) -> (mixfix_lbrb s1
  i = mixfix_lbrb s2 i))

axiom extensionality : forall s1:string, s2:string. infix_eqeq s1 s2 ->
  (s1 = s2)

function app string string : string

axiom app_def1 : forall s1:string, s2:string. (length (app s1 s2) = infix_pl
  (length s1) (length s2))

axiom app_def2 : forall s1:string, s2:string, i:int. infix_lseq 0 i /\
  infix_ls i (length s1) -> (mixfix_lbrb (app s1 s2) i = mixfix_lbrb s1 i)

axiom app_def3 : forall s1:string, s2:string, i:int. infix_lseq (length s1)
  i /\ infix_ls i (infix_pl (length s1) (length s2)) -> (mixfix_lbrb (app s1
  s2) i = mixfix_lbrb s2 (infix_mn i (length s1)))

axiom app_assoc : forall s1:string, s2:string, s3:string. infix_eqeq (app s1
  (app s2 s3)) (app (app s1 s2) s3)

function sub string int int : string

axiom sub_def1 : forall s:string, ofs:int, len:int. infix_lseq 0 len ->
  infix_lseq 0 ofs /\ infix_lseq ofs (length s) -> infix_lseq (infix_pl ofs
  len) (length s) -> (length (sub s ofs len) = len)

axiom sub_def2 : forall s:string, ofs:int, len:int. infix_lseq 0 len ->
  infix_lseq 0 ofs /\ infix_lseq ofs (length s) -> infix_lseq (infix_pl ofs
  len) (length s) -> (forall i:int. infix_lseq 0 i /\ infix_ls i len ->
  (mixfix_lbrb (sub s ofs len) i = mixfix_lbrb s (infix_pl ofs i)))

(* use String *)

type rope =
  | Emp
  | Str string int int
  | App rope rope int

function length1 (r:rope) : int =
  match r with
  | Emp -> 0
  | Str _ _ len -> len
  | App _ _ len -> len
  end

predicate inv2 (r:rope) =
  match r with
  | Emp -> true
  | Str s ofs len -> infix_ls 0 len /\ (infix_lseq 0 ofs /\ infix_ls ofs
      (length s)) /\ infix_lseq (infix_pl ofs len) (length s)
  | App l r1 len -> infix_ls 0 (length1 l) /\ inv2 l /\ infix_ls 0 (length1
      r1) /\ inv2 r1 /\ (len = infix_pl (length1 l) (length1 r1))
  end

function string (r:rope) : string =
  match r with
  | Emp -> empty
  | Str s ofs len -> sub s ofs len
  | App l r1 _ -> app (string l) (string r1)
  end

axiom rope_length_is_string_length : forall r:rope. inv2 r -> (length (string
  r) = length1 r)

type tuple2 'a 'a1 =
  | Tuple2 'a 'a1

(* use why3.Tuple2.Tuple21 *)

(* use Rope *)

function fib int : int

axiom fib0 : (fib 0 = 0)

axiom fib1 : (fib 1 = 1)

axiom fibn : forall n:int. infix_gteq n 2 -> (fib n = infix_pl (fib (infix_mn
  n 1)) (fib (infix_mn n 2)))

(* use int.Fibonacci *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Reflexive with type t9 = int, predicate rel1 = infix_lseq,
  prop Refl1 = Refl6 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Transitive with type t10 = int,
  predicate rel2 = infix_lseq, prop Trans1 = Trans6 *)

(* clone relations.PreOrder with type t11 = int, predicate rel3 = infix_lseq,
  prop Trans2 = Trans6, prop Refl2 = Refl6 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Antisymmetric with type t12 = int,
  predicate rel4 = infix_lseq, prop Antisymm1 = Antisymm5 *)

(* clone relations.PartialOrder with type t13 = int,
  predicate rel5 = infix_lseq, prop Antisymm2 = Antisymm5,
  prop Trans3 = Trans6, prop Refl3 = Refl6 *)

(* clone relations.EndoRelation with type t8 = int,
  predicate rel = infix_lseq,  *)

(* clone relations.Total with type t14 = int, predicate rel6 = infix_lseq,
  prop Total1 = Total4 *)

(* clone relations.TotalOrder with type t15 = int,
  predicate rel7 = infix_lseq, prop Total2 = Total4,
  prop Antisymm3 = Antisymm5, prop Trans4 = Trans6, prop Refl4 = Refl6 *)

function min (x:int) (y:int) : int = if infix_lseq x y then x else y

function max (x:int) (y:int) : int = if infix_lseq x y then y else x

axiom Min_r : forall x:int, y:int. infix_lseq y x -> (min x y = y)

axiom Max_l : forall x:int, y:int. infix_lseq y x -> (max x y = x)

axiom Min_comm : forall x:int, y:int. (min x y = min y x)

axiom Max_comm : forall x:int, y:int. (max x y = max y x)

axiom Min_assoc : forall x:int, y:int, z:int. (min (min x y) z = min x (min y
  z))

axiom Max_assoc : forall x:int, y:int, z:int. (max (max x y) z = max x (max y
  z))

(* clone relations.MinMax with type t17 = int, function max1 = max,
  function min1 = min, predicate le = infix_lseq,
  prop Max_assoc1 = Max_assoc, prop Min_assoc1 = Min_assoc,
  prop Max_comm1 = Max_comm, prop Min_comm1 = Min_comm, prop Max_l1 = Max_l,
  prop Min_r1 = Min_r, prop Total5 = Total4, prop Antisymm6 = Antisymm5,
  prop Trans7 = Trans6, prop Refl7 = Refl6 *)

(* use int.MinMax1 *)

type map 'a 'b

(* meta material_type_arg type map, 1 *)

function get (map 'a 'b) 'a : 'b

function set (map 'a 'b) 'a 'b : map 'a 'b

function mixfix_lbrb1 (a:map 'a 'b) (i:'a) : 'b = get a i

function mixfix_lblsmnrb (a:map 'a 'b) (i:'a) (v:'b) : map 'a 'b = set a i v

axiom Select_eq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb1 (mixfix_lblsmnrb m a1 b) a2]. (a1 = a2) -> (mixfix_lbrb1
  (mixfix_lblsmnrb m a1 b) a2 = b)

axiom Select_neq : forall m:map 'a 'b. forall a1:'a, a2:'a. forall b:'b
  [mixfix_lbrb1 (mixfix_lblsmnrb m a1 b) a2]. not (a1 = a2) -> (mixfix_lbrb1
  (mixfix_lblsmnrb m a1 b) a2 = mixfix_lbrb1 m a2)

(* use map.Map *)

type array 'a =
  | Mk_array (length2:int) (elts:map int 'a)

function get1 (a:array 'a) (i:int) : 'a = get (elts a) i

function set1 (a:array 'a) (i:int) (v:'a) : array 'a = Mk_array (length2 a)
  (set (elts a) i v)

function mixfix_lbrb2 (a:array 'a) (i:int) : 'a = get1 a i

function mixfix_lblsmnrb1 (a:array 'a) (i:int) (v:'a) : array 'a = set1 a i v

(* use array.Array *)

type ref 'a =
  | Mk_ref (contents:'a)

function prefix_ex (x:ref 'a) : 'a = contents x

(* use ref.Ref *)

function max2 : int

axiom max_at_least_2 : infix_lseq 2 max2

function string_of_array (array rope) int int : string

axiom string_of_array_empty : forall q:array rope, l:int. infix_lseq 0 l /\
  infix_lseq l (length2 q) -> infix_eqeq (string_of_array q l l) empty

axiom string_of_array_concat_left : forall q:array rope, l:int, u:int.
  infix_lseq 0 l /\ infix_ls l u /\ infix_lseq u (length2 q) -> infix_eqeq
  (string_of_array q l u) (app (string_of_array q (infix_pl l 1) u) (string
  (mixfix_lbrb2 q l)))

axiom string_of_array_concat "why3:lemma" : forall q:array rope, l:int, mid:
  int, u:int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0
  (length2 q)) && ("stop_split" infix_lseq 0 l /\ infix_lseq l mid /\
  infix_lseq mid u /\ infix_lseq u (length2 q)) -> ("stop_split" infix_eqeq
  (string_of_array q l u) (app (string_of_array q mid u) (string_of_array q l
  mid)))

axiom string_of_array_concat_right "why3:lemma" : forall q:array rope, l:int,
  u:int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0
  (length2 q)) && ("stop_split" infix_lseq 0 l /\ infix_ls l u /\ infix_lseq
  u (length2 q)) -> ("stop_split" infix_eqeq (string_of_array q l u) (app
  (string (mixfix_lbrb2 q (infix_mn u 1))) (string_of_array q l (infix_mn u
  1))))

axiom string_of_array_length "why3:lemma" : forall q:array rope, l:int, u:
  int, i:int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0
  (length2 q)) && ("stop_split" infix_lseq 0 l /\ infix_lseq l i /\ infix_ls
  i u /\ infix_lseq u (length2 q)) /\ ("stop_split" forall j:int. infix_lseq
  l j /\ infix_ls j u -> inv2 (mixfix_lbrb2 q j)) -> ("stop_split" infix_gteq
  (length (string_of_array q l u)) (length (string (mixfix_lbrb2 q i))))

axiom string_of_array_eq "why3:lemma" : forall q1:array rope, q2:array rope,
  l:int, u:int. ("asym_split" ("stop_split" "expl:type invariant" infix_lseq
  0 (length2 q1)) /\ ("stop_split" "expl:type invariant" infix_lseq 0
  (length2 q2))) && ("stop_split" infix_lseq 0 l /\ infix_lseq l u /\
  infix_lseq u (length2 q1) /\ (length2 q1 = length2 q2)) /\
  ("stop_split" forall j:int. infix_lseq l j /\ infix_ls j u -> (mixfix_lbrb2
  q1 j = mixfix_lbrb2 q2 j)) -> ("stop_split" infix_eqeq (string_of_array q1
  l u) (string_of_array q2 l u))

axiom string_of_array_frame : forall q:array rope, l:int, u:int. infix_lseq 0
  l /\ infix_lseq l u /\ infix_lseq u (length2 q) -> (forall i:int, r:rope.
  infix_lseq 0 i /\ infix_ls i l \/ infix_lseq u i /\ infix_ls i (length2
  q) -> infix_eqeq (string_of_array q l u) (string_of_array (mixfix_lblsmnrb1
  q i r) l u))

axiom string_of_array_concat_empty "why3:lemma" : forall q:array rope, l:int,
  u:int. ("asym_split" "stop_split" "expl:type invariant" infix_lseq 0
  (length2 q)) && ("stop_split" infix_lseq 0 l /\ infix_lseq l u /\
  infix_lseq u (length2 q)) /\ ("stop_split" forall j:int. infix_lseq l j /\
  infix_ls j u -> (mixfix_lbrb2 q j = Emp)) -> ("stop_split" infix_eqeq
  (string_of_array q l u) empty)

function string_of_queue (q:array rope) : string = string_of_array q 2
  (length2 q)

(* meta syntax_type type int, "int", 0 *)

(* meta syntax_type type real, "real", 0 *)

(* meta syntax_logic predicate infix_eq, "(%1 = %2)", 0 *)

goal WP_parameter_insert_leaves "expl:VC for insert_leaves" : forall q:int,
  q1:map int rope, r:rope. let q2 = Mk_array q q1 in ("asym_split"
  "stop_split" "expl:type invariant" infix_lseq 0 q) &&
  ("stop_split" infix_ls 2 q /\ (q = infix_pl max2 1)) /\ ("stop_split" inv2
  r) /\ ("stop_split" forall j:int. infix_lseq 2 j /\ infix_lseq j max2 ->
  inv2 (get q1 j)) /\ ("stop_split" infix_ls (infix_pl (length
  (string_of_queue q2))
  match r with
  | Emp -> 0
  | Str _ _ len -> len
  | App _ _ len -> len
  end) (fib (infix_pl max2 1))) -> (forall x:string, x1:int, x2:int. (r = Str
  x x1 x2) -> ("asym_split" ("stop_split" "expl:precondition" infix_lseq 2
  2 /\ infix_ls 2 q /\ (q = infix_pl max2 1)) /\ ("stop_split"
  "expl:precondition" inv2 r) /\ ("stop_split" "expl:precondition" forall j:
  int. infix_lseq 2 j /\ infix_lseq j max2 -> inv2 (get q1 j)) /\
  ("stop_split" "expl:precondition" infix_ls (infix_pl (length
  (string_of_array q2 2 (infix_pl max2 1)))
  match r with
  | Emp -> 0
  | Str _ _ len -> len
  | App _ _ len -> len
  end) (fib (infix_pl max2 1)))) -> (forall q3:map int rope.
  let q4 = Mk_array q q3 in ("asym_split" "stop_split"
  "expl:type invariant" infix_lseq 0 q) && ("stop_split" forall j:int.
  infix_lseq 2 j /\ infix_lseq j max2 -> inv2 (get q3 j)) /\
  ("stop_split" forall j:int. infix_lseq 2 j /\ infix_ls j 2 -> (get q3
  j = get q1 j)) /\ ("stop_split" infix_eqeq (string_of_array q4 2 (infix_pl
  max2 1)) (app (string_of_array q2 2 (infix_pl max2 1)) (string r))) ->
  ("expl:postcondition" forall j:int. infix_lseq 2 j /\ infix_lseq j max2 ->
  inv2 (get q3 j))))

end
